{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/lib/cloudinary.ts"],"sourcesContent":["import { v2 as cloudinary } from 'cloudinary';\n\n// تكوين Cloudinary\nconst isCloudinaryConfigured = Boolean(\n  process.env.CLOUDINARY_CLOUD_NAME &&\n  process.env.CLOUDINARY_API_KEY &&\n  process.env.CLOUDINARY_API_SECRET &&\n  process.env.CLOUDINARY_CLOUD_NAME !== 'demo'\n);\n\nif (isCloudinaryConfigured) {\n  cloudinary.config({\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n    api_key: process.env.CLOUDINARY_API_KEY,\n    api_secret: process.env.CLOUDINARY_API_SECRET,\n  });\n  console.log('✅ Cloudinary configured successfully with cloud:', process.env.CLOUDINARY_CLOUD_NAME);\n} else {\n  console.log('⚠️ Cloudinary not configured. Using local fallback mode.');\n  console.log('📋 Environment variables status:', {\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'missing',\n    api_key: process.env.CLOUDINARY_API_KEY ? 'configured' : 'missing',\n    api_secret: process.env.CLOUDINARY_API_SECRET ? 'configured' : 'missing'\n  });\n}\n\nexport interface CloudinaryUploadResult {\n  public_id: string;\n  secure_url: string;\n  url: string;\n  format: string;\n  resource_type: 'image' | 'video' | 'raw';\n  bytes: number;\n  width?: number;\n  height?: number;\n  duration?: number;\n  created_at: string;\n}\n\n/**\n * رفع ملف إلى Cloudinary\n */\nexport async function uploadToCloudinary(\n  file: File,\n  options: {\n    folder?: string;\n    public_id?: string;\n    resource_type?: 'auto' | 'image' | 'video' | 'raw';\n    transformation?: any;\n  } = {}\n): Promise<CloudinaryUploadResult> {\n  // التحقق من إعداد Cloudinary\n  if (!isCloudinaryConfigured) {\n    throw new Error('Cloudinary غير مُعَدّ. يرجى إضافة بيانات الاعتماد في ملف .env');\n  }\n\n  try {\n    // التحقق من صحة الملف أولاً\n    if (!file || file.size === 0) {\n      throw new Error('الملف فارغ أو غير صالح');\n    }\n\n    // تحويل File إلى Buffer مع معالجة الأخطاء\n    let buffer: Buffer;\n    try {\n      const bytes = await file.arrayBuffer();\n      buffer = Buffer.from(bytes);\n\n      if (buffer.length === 0) {\n        throw new Error('فشل في قراءة محتوى الملف');\n      }\n    } catch (error) {\n      throw new Error(`فشل في معالجة الملف: ${error instanceof Error ? error.message : 'خطأ غير معروف'}`);\n    }\n\n    // تحديد نوع الملف مع فحص أعمق\n    const isVideo = file.type.startsWith('video/');\n    const isImage = file.type.startsWith('image/');\n\n    if (!isVideo && !isImage) {\n      throw new Error(`نوع الملف غير مدعوم: ${file.type}`);\n    }\n\n    const defaultOptions = {\n      folder: options.folder || 'portfolio',\n      resource_type: options.resource_type || (isVideo ? 'video' : isImage ? 'image' : 'auto'),\n      public_id: options.public_id,\n      // تحسينات مخصصة حسب نوع الملف\n      transformation: options.transformation || (isVideo ? {\n        // إعدادات أساسية للفيديو\n        quality: 'auto',\n        width: 1280,\n        height: 720,\n        crop: 'limit',\n        bit_rate: '1m'\n      } : {\n        // تحسينات للصور\n        quality: 'auto',\n        fetch_format: 'auto',\n        flags: 'progressive',\n      }),\n      // إعدادات إضافية\n      overwrite: true,\n      invalidate: true,\n      // إعدادات خاصة بالفيديو\n      ...(isVideo && {\n        chunk_size: 6000000, // 6MB chunks for large videos\n        timeout: 120000, // 2 minutes timeout for videos\n      }),\n      ...options\n    };\n\n    console.log('🚀 رفع ملف إلى Cloudinary:', {\n      name: file.name,\n      type: file.type,\n      size: file.size,\n      folder: defaultOptions.folder,\n      resource_type: defaultOptions.resource_type,\n      sizeInMB: (file.size / 1024 / 1024).toFixed(2) + 'MB'\n    });\n\n    // رفع الملف\n    const result: { secure_url: string; public_id: string } = await new Promise((resolve, reject) => {\n      cloudinary.uploader.upload_stream(\n        defaultOptions,\n        (error, result) => {\n          if (error) {\n            console.error('❌ خطأ في رفع Cloudinary:', error);\n            reject(error);\n          } else if (result) {\n            console.log('✅ تم رفع الملف بنجاح:', {\n              url: result.secure_url,\n              public_id: result.public_id,\n              resource_type: result.resource_type,\n              bytes: result.bytes\n            });\n\n            // التحقق من صحة النتيجة\n            if (!result.secure_url) {\n              reject(new Error('لم يتم إرجاع رابط آمن من Cloudinary'));\n              return;\n            }\n\n            resolve(result as CloudinaryUploadResult);\n          } else {\n            reject(new Error('لم يتم إرجاع نتيجة من Cloudinary'));\n          }\n        }\n      ).end(buffer);\n    });\n\n    return result;\n  } catch (error) {\n    console.error('❌ خطأ في رفع الملف:', error);\n\n    // رسائل خطأ مخصصة حسب نوع الخطأ\n    let errorMessage = 'خطأ غير معروف';\n\n    if (error instanceof Error) {\n      if (error.message.includes('Invalid cloud_name')) {\n        errorMessage = 'اسم Cloud غير صحيح في إعدادات Cloudinary';\n      } else if (error.message.includes('Invalid API key')) {\n        errorMessage = 'API Key غير صحيح في إعدادات Cloudinary';\n      } else if (error.message.includes('file size')) {\n        errorMessage = 'حجم الملف كبير جداً. الحد الأقصى للفيديو 100MB';\n      } else if (error.message.includes('timeout')) {\n        errorMessage = 'انتهت مهلة رفع الملف. جرب ملف أصغر';\n      } else if (isVideo && error.message.includes('resource_type')) {\n        errorMessage = 'نوع الفيديو غير مدعوم. جرب MP4';\n      } else {\n        errorMessage = error.message;\n      }\n    }\n\n    throw new Error(`فشل في رفع الملف: ${errorMessage}`);\n  }\n}\n\n/**\n * حذف ملف من Cloudinary\n */\nexport async function deleteFromCloudinary(\n  publicId: string,\n  resourceType: 'image' | 'video' | 'raw' = 'image'\n): Promise<any> {\n  try {\n    console.log('🗑️ حذف ملف من Cloudinary:', publicId);\n\n    const result = await cloudinary.uploader.destroy(publicId, {\n      resource_type: resourceType,\n      invalidate: true\n    });\n\n    console.log('✅ تم حذف الملف:', result);\n    return result;\n  } catch (error) {\n    console.error('❌ خطأ في حذف الملف:', error);\n    throw error;\n  }\n}\n\n/**\n * الحصول على رابط محسن للصورة\n */\nexport function getOptimizedImageUrl(\n  publicId: string,\n  options: Record<string, unknown> = {}\n): string {\n  return cloudinary.url(publicId, {\n    quality: options.quality || 'auto',\n    fetch_format: options.format || 'auto',\n    width: options.width,\n    height: options.height,\n    crop: options.crop || 'fill',\n    flags: 'progressive',\n    ...options\n  });\n}\n\n/**\n * الحصول على رابط محسن للفيديو\n */\nexport function getOptimizedVideoUrl(\n  publicId: string,\n  options: Record<string, unknown> = {}\n): string {\n  return cloudinary.url(publicId, {\n    resource_type: 'video',\n    quality: options.quality || 'auto',\n    fetch_format: options.format || 'auto',\n    width: options.width,\n    height: options.height,\n    ...options\n  });\n}\n\n/**\n * إنشاء thumbnail للفيديو\n */\nexport function getVideoThumbnail(\n  publicId: string,\n  options: Record<string, unknown> = {}\n): string {\n  return cloudinary.url(publicId, {\n    resource_type: 'video',\n    format: 'jpg',\n    quality: 'auto',\n    width: options.width || 300,\n    height: options.height || 200,\n    crop: 'fill',\n    start_offset: options.start_offset || '0',\n    ...options\n  });\n}\n\n/**\n * تحسين الصورة تلقائياً حسب الاستخدام\n */\nexport function getResponsiveImageUrl(\n  publicId: string,\n  usage: 'thumbnail' | 'card' | 'hero' | 'gallery' = 'card'\n): string {\n  const configs = {\n    thumbnail: { width: 150, height: 150, crop: 'thumb', gravity: 'face' },\n    card: { width: 400, height: 300, crop: 'fill' },\n    hero: { width: 1200, height: 600, crop: 'fill' },\n    gallery: { width: 800, height: 600, crop: 'fill' }\n  };\n\n  const config = configs[usage];\n\n  return cloudinary.url(publicId, {\n    ...config,\n    quality: 'auto',\n    fetch_format: 'auto',\n    flags: 'progressive',\n    dpr: 'auto'\n  });\n}\n\n/**\n * إنشاء مجموعة من الصور بأحجام مختلفة (responsive images)\n */\nexport function getImageSrcSet(publicId: string): string {\n  const sizes = [320, 640, 768, 1024, 1280, 1920];\n\n  return sizes.map(size => {\n    const url = cloudinary.url(publicId, {\n      width: size,\n      quality: 'auto',\n      fetch_format: 'auto',\n      flags: 'progressive'\n    });\n    return `${url} ${size}w`;\n  }).join(', ');\n}\n\n/**\n * تحقق من صحة رابط Cloudinary\n */\nexport function isCloudinaryUrl(url: string): boolean {\n  return url.includes('cloudinary.com') || url.includes('res.cloudinary.com');\n}\n\n/**\n * استخراج معرف العام من رابط Cloudinary\n */\nexport function extractPublicIdFromUrl(url: string): string | null {\n  if (!isCloudinaryUrl(url)) return null;\n\n  const matches = url.match(/\\/(?:image|video)\\/upload\\/(?:v\\d+\\/)?(.+?)(?:\\.|$)/);\n  return matches ? matches[1].split('.')[0] : null;\n}\n\nexport default cloudinary;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/app/api/upload/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport { uploadToCloudinary } from '@/lib/cloudinary';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { existsSync } from 'fs';\nimport path from 'path';\n\n// التحقق من توفر إعدادات Cloudinary\nconst isCloudinaryAvailable = Boolean(\n  process.env.CLOUDINARY_CLOUD_NAME &&\n  process.env.CLOUDINARY_API_KEY &&\n  process.env.CLOUDINARY_API_SECRET &&\n  process.env.CLOUDINARY_CLOUD_NAME !== 'demo'\n);\n\n// دالة لتحسين أسماء الملفات لـ SEO\nfunction generateSEOFriendlyName(originalName: string): string {\n  const nameWithoutExt = originalName.replace(/\\.[^/.]+$/, '');\n  return nameWithoutExt\n    .toLowerCase()\n    .replace(/[\\s_]+/g, '-') // استبدال المسافات بـ -\n    .replace(/[^\\w\\u0600-\\u06FF-]/g, '') // الحفاظ على الأحرف العربية والإنجليزية فقط\n    .replace(/-+/g, '-') // إزالة الشرطات المتكررة\n    .replace(/^-|-$/g, '') // إزالة الشرطات من البداية والنهاية\n    .substring(0, 50) || 'aldeyar-project'; // تحديد الطول\n}\n\n// إعدادات محسنة للرفع\nconst UPLOAD_CONFIG = {\n  maxFileSize: isCloudinaryAvailable ? 100 * 1024 * 1024 : 50 * 1024 * 1024, // 100MB/50MB\n  maxFiles: 20, // حد أقصى 20 ملف في المرة الواحدة\n  allowedImageTypes: [\n    'image/jpeg', 'image/jpg', 'image/png', 'image/webp', \n    'image/gif', 'image/bmp', 'image/tiff'\n  ],\n  allowedVideoTypes: [\n    'video/mp4', 'video/mov', 'video/avi', 'video/webm', \n    'video/quicktime', 'video/x-msvideo', 'video/mkv'\n  ],\n  compressionQuality: {\n    image: { quality: 85, width: 1920, height: 1080 },\n    video: { quality: 'auto', width: 1280, height: 720 }\n  }\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n\n    // دعم رفع ملف واحد أو عدة ملفات\n    const files = formData.getAll('files') as File[];\n    const singleFile = formData.get('file') as File;\n\n    console.log('📤 محاولة رفع ملف:', {\n      singleFile: !!singleFile,\n      singleFileName: singleFile?.name,\n      singleFileType: singleFile?.type,\n      singleFileSize: singleFile?.size,\n      multipleFiles: files.length,\n      cloudinaryAvailable: isCloudinaryAvailable\n    });\n\n    let filesToProcess: File[] = [];\n\n    if (singleFile && singleFile.size > 0) {\n      filesToProcess = [singleFile];\n    } else if (files && files.length > 0) {\n      // تصفية الملفات الفارغة\n      filesToProcess = files.filter(file => file && file.size > 0);\n    }\n\n    if (filesToProcess.length === 0) {\n      console.log('❌ لم يتم تحديد أي ملفات');\n      return NextResponse.json(\n        { error: 'لم يتم تحديد أي ملفات' },\n        { status: 400 }\n      );\n    }\n\n    const uploadedFiles = [];\n\n    // إعداد التخزين المحلي كـ fallback\n    let uploadDir = '';\n    if (!isCloudinaryAvailable) {\n      uploadDir = path.join(process.cwd(), 'public', 'uploads');\n      if (!existsSync(uploadDir)) {\n        await mkdir(uploadDir, { recursive: true });\n        console.log('📁 تم إنشاء مجلد uploads (fallback mode)');\n      }\n    }\n\n    for (const file of filesToProcess) {\n      if (!file || file.size === 0) {\n        console.log('⚠️ تجاهل ملف فارغ');\n        continue;\n      }\n\n      console.log('🔍 معالجة ملف:', {\n        name: file.name,\n        type: file.type,\n        size: file.size\n      });\n\n      // التحقق من نوع الملف مع دعم أفضل\n      const isImage = UPLOAD_CONFIG.allowedImageTypes.includes(file.type);\n      const isVideo = UPLOAD_CONFIG.allowedVideoTypes.includes(file.type);\n      \n      if (!isImage && !isVideo) {\n        console.log('❌ نوع ملف غير مدعوم:', file.type);\n        uploadedFiles.push({\n          originalName: file.name,\n          error: `نوع الملف ${file.type} غير مدعوم`,\n          type: 'ERROR'\n        });\n        continue;\n      }\n\n      // التحقق من حجم الملف مع رسائل مفصلة\n      if (file.size > UPLOAD_CONFIG.maxFileSize) {\n        const maxSizeMB = (UPLOAD_CONFIG.maxFileSize / 1024 / 1024).toFixed(0);\n        const fileSizeMB = (file.size / 1024 / 1024).toFixed(1);\n        console.log(`❌ ملف كبير جداً: ${fileSizeMB}MB > ${maxSizeMB}MB`);\n        uploadedFiles.push({\n          originalName: file.name,\n          error: `حجم الملف ${fileSizeMB}MB يتجاوز الحد الأقصى ${maxSizeMB}MB`,\n          type: 'ERROR'\n        });\n        continue;\n      }\n\n      // التحقق من امتداد الملف للأمان\n      const fileExtension = path.extname(file.name).toLowerCase();\n      const validImageExts = ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp', '.tiff'];\n      const validVideoExts = ['.mp4', '.mov', '.avi', '.webm', '.mkv'];\n      \n      if (isImage && !validImageExts.includes(fileExtension)) {\n        uploadedFiles.push({\n          originalName: file.name,\n          error: `امتداد الملف ${fileExtension} لا يتطابق مع نوع الصورة`,\n          type: 'ERROR'\n        });\n        continue;\n      }\n      \n      if (isVideo && !validVideoExts.includes(fileExtension)) {\n        uploadedFiles.push({\n          originalName: file.name,\n          error: `امتداد الملف ${fileExtension} لا يتطابق مع نوع الفيديو`,\n          type: 'ERROR'\n        });\n        continue;\n      }\n\n      try {\n        let uploadedFile;\n\n        if (isCloudinaryAvailable) {\n          // رفع إلى Cloudinary مع إعدادات محسنة\n          console.log('☁️ رفع إلى Cloudinary...');\n          \n          // تحسين أسماء الملفات لـ SEO\n          const seoFriendlyName = generateSEOFriendlyName(file.name);\n          \n          const cloudinaryOptions = {\n            folder: 'portfolio/projects',\n            resource_type: isVideo ? 'video' : 'image',\n            public_id: `${Date.now()}-${seoFriendlyName}`,\n            use_filename: false,\n            unique_filename: true,\n            overwrite: false,\n            // إضافة metadata للSEO\n            context: {\n              alt: `محترفين الديار العالمية - ${seoFriendlyName}`,\n              caption: `مشروع من محترفين الديار العالمية في جدة`,\n              title: seoFriendlyName\n            },\n            // تحسين خصائص الملفات للويب\n            transformation: isVideo ? {\n              // إعدادات أساسية للفيديو فقط\n              quality: 'auto',\n              width: 1280,\n              height: 720,\n              crop: 'limit'\n            } : {\n              // تحسين للصور\n              quality: 'auto',\n              format: 'webp',\n              width: 'auto',\n              crop: 'scale',\n              dpr: 'auto',\n              flags: 'progressive'\n            },\n            // إعدادات إضافية للأمان والأداء\n            invalidate: true,\n            overwrite: true,\n            unique_filename: true,\n            use_filename: false\n          };\n\n          const result = await uploadToCloudinary(file, cloudinaryOptions);\n\n          console.log('✅ تم رفع الملف إلى Cloudinary:', result.secure_url);\n\n          uploadedFile = {\n            originalName: file.name,\n            fileName: result.public_id,\n            src: result.secure_url,\n            url: result.secure_url,\n            type: file.type.startsWith('video/') ? 'VIDEO' : 'IMAGE',\n            size: result.bytes,\n            mimeType: file.type,\n            width: result.width || null,\n            height: result.height || null,\n            duration: result.duration || null,\n            cloudinary_public_id: result.public_id,\n            cloudinary_url: result.secure_url,\n            resource_type: result.resource_type,\n            storage_type: 'cloudinary'\n          };\n\n          // التحقق من صحة النتيجة\n          if (!uploadedFile.src) {\n            throw new Error('لم يتم الحصول على رابط صحيح من Cloudinary');\n          }\n\n        } else {\n          // رفع محلي (fallback)\n          console.log('💾 رفع محلي (fallback mode)...');\n\n          const timestamp = Date.now();\n          const randomString = Math.random().toString(36).substring(2, 15);\n          const fileExtension = path.extname(file.name);\n          const fileName = `${timestamp}_${randomString}${fileExtension}`;\n\n          const filePath = path.join(uploadDir, fileName);\n          const bytes = await file.arrayBuffer();\n          const buffer = Buffer.from(bytes);\n\n          await writeFile(filePath, buffer);\n          console.log('✅ تم حفظ الملف محلياً:', fileName);\n\n          uploadedFile = {\n            originalName: file.name,\n            fileName: fileName,\n            src: `/uploads/${fileName}`,\n            url: `/uploads/${fileName}`,\n            type: file.type.startsWith('video/') ? 'VIDEO' : 'IMAGE',\n            size: file.size,\n            mimeType: file.type,\n            storage_type: 'local'\n          };\n        }\n\n        uploadedFiles.push(uploadedFile);\n\n      } catch (uploadError) {\n        console.error('❌ خطأ في رفع الملف:', uploadError);\n\n        uploadedFiles.push({\n          originalName: file.name,\n          error: `فشل في رفع ${file.name}: ${uploadError instanceof Error ? uploadError.message : 'خطأ غير معروف'}`,\n          type: 'ERROR'\n        });\n      }\n    }\n\n    if (uploadedFiles.length === 0) {\n      return NextResponse.json(\n        { error: 'لم يتم رفع أي ملفات بنجاح' },\n        { status: 400 }\n      );\n    }\n\n    // فصل الملفات الناجحة عن الخاطئة\n    const successfulFiles = uploadedFiles.filter(file => file.type !== 'ERROR');\n    const failedFiles = uploadedFiles.filter(file => file.type === 'ERROR');\n\n    console.log('📊 نتيجة الرفع:', {\n      successful: successfulFiles.length,\n      failed: failedFiles.length,\n      total: uploadedFiles.length,\n      storageType: isCloudinaryAvailable ? 'cloudinary' : 'local'\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: `تم رفع ${successfulFiles.length} ملف بنجاح${failedFiles.length > 0 ? ` و فشل ${failedFiles.length} ملف` : ''}`,\n      files: successfulFiles,\n      errors: failedFiles.length > 0 ? failedFiles : undefined,\n      count: successfulFiles.length,\n      storage_type: isCloudinaryAvailable ? 'cloudinary' : 'local'\n    });\n\n  } catch (error) {\n    console.error('❌ خطأ عام في رفع الملفات:', error);\n    return NextResponse.json(\n      {\n        error: 'حدث خطأ في رفع الملفات',\n        details: error instanceof Error ? error.message : 'خطأ غير معروف'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}