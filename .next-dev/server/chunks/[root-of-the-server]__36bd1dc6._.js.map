{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;;AAIA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO;AAC1E;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/app/api/projects/%5Bid%5D/interactions/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { headers } from 'next/headers';\n\ninterface InteractionParams {\n  params: { id: string };\n}\n\n// POST - تسجيل تفاعل (مشاهدة أو إعجاب)\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params;\n    const { id: projectId } = resolvedParams;\n    const { type, action } = await request.json();\n    const headersList = await headers();\n    const ip = headersList.get('x-forwarded-for') || headersList.get('x-real-ip') || 'unknown';\n    const userAgent = headersList.get('user-agent') || 'unknown';\n    const referrer = headersList.get('referer') || 'direct';\n\n    // التحقق من وجود المشروع\n    const project = await prisma.project.findUnique({\n      where: { id: projectId }\n    });\n\n    if (!project) {\n      return NextResponse.json(\n        { error: 'المشروع غير موجود' },\n        { status: 404 }\n      );\n    }\n\n    let result: any = {};\n\n    if (type === 'view') {\n      // تسجيل المشاهدة\n      const existingView = await prisma.projectView.findFirst({\n        where: {\n          projectId,\n          ip,\n          createdAt: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // آخر 24 ساعة\n          }\n        }\n      });\n\n      if (!existingView) {\n        // تسجيل مشاهدة جديدة\n        await prisma.projectView.create({\n          data: {\n            projectId,\n            ip,\n            userAgent,\n            source: getSource(referrer),\n            referrer\n          }\n        });\n\n        // تحديث عداد المشاهدات\n        const updatedProject = await prisma.project.update({\n          where: { id: projectId },\n          data: {\n            views: {\n              increment: 1\n            }\n          },\n          select: { views: true }\n        });\n\n        result = {\n          type: 'view',\n          success: true,\n          newCount: updatedProject.views,\n          isNew: true\n        };\n      } else {\n        result = {\n          type: 'view',\n          success: true,\n          newCount: project.views,\n          isNew: false\n        };\n      }\n\n    } else if (type === 'like') {\n      // إدارة الإعجاب\n      const existingLike = await prisma.projectLike.findUnique({\n        where: {\n          projectId_ip: {\n            projectId,\n            ip\n          }\n        }\n      });\n\n      if (action === 'toggle' || action === 'add') {\n        if (!existingLike) {\n          // إضافة إعجاب جديد\n          await prisma.projectLike.create({\n            data: {\n              projectId,\n              ip,\n              userAgent\n            }\n          });\n\n          // تحديث عداد الإعجابات\n          const updatedProject = await prisma.project.update({\n            where: { id: projectId },\n            data: {\n              likes: {\n                increment: 1\n              }\n            },\n            select: { likes: true }\n          });\n\n          result = {\n            type: 'like',\n            action: 'added',\n            success: true,\n            newCount: updatedProject.likes,\n            isLiked: true\n          };\n        } else if (action === 'toggle') {\n          // إزالة الإعجاب\n          await prisma.projectLike.delete({\n            where: {\n              projectId_ip: {\n                projectId,\n                ip\n              }\n            }\n          });\n\n          // تحديث عداد الإعجابات\n          const updatedProject = await prisma.project.update({\n            where: { id: projectId },\n            data: {\n              likes: {\n                decrement: 1\n              }\n            },\n            select: { likes: true }\n          });\n\n          result = {\n            type: 'like',\n            action: 'removed',\n            success: true,\n            newCount: Math.max(0, updatedProject.likes),\n            isLiked: false\n          };\n        } else {\n          result = {\n            type: 'like',\n            success: true,\n            newCount: project.likes,\n            isLiked: true,\n            message: 'لقد أعجبت بهذا المشروع مسبقاً'\n          };\n        }\n      }\n    }\n\n    return NextResponse.json(result);\n\n  } catch (error: unknown) {\n    console.error('❌ خطأ في تسجيل التفاعل:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ في تسجيل التفاعل' },\n      { status: 500 }\n    );\n  }\n}\n\n// GET - جلب إحصائيات التفاعل للمستخدم الحالي\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params;\n    const { id: projectId } = resolvedParams;\n    const headersList = await headers();\n    const ip = headersList.get('x-forwarded-for') || headersList.get('x-real-ip') || 'unknown';\n\n    // التحقق من وجود المشروع\n    const project = await prisma.project.findUnique({\n      where: { id: projectId },\n      select: {\n        id: true,\n        views: true,\n        likes: true,\n        _count: {\n          select: {\n            comments: {\n              where: { status: 'APPROVED' }\n            }\n          }\n        }\n      }\n    });\n\n    if (!project) {\n      return NextResponse.json(\n        { error: 'المشروع غير موجود' },\n        { status: 404 }\n      );\n    }\n\n    // التحقق من حالة الإعجاب للمستخدم الحالي\n    const userLike = await prisma.projectLike.findUnique({\n      where: {\n        projectId_ip: {\n          projectId,\n          ip\n        }\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      interactions: {\n        views: project.views,\n        likes: project.likes,\n        comments: project._count.comments,\n        isLiked: !!userLike\n      }\n    });\n\n  } catch (error: unknown) {\n    console.error('❌ خطأ في جلب إحصائيات التفاعل:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ في جلب الإحصائيات' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function\nfunction getSource(referrer: string): string {\n  if (referrer.includes('google.com')) return 'google';\n  if (referrer.includes('facebook.com')) return 'facebook';\n  if (referrer.includes('instagram.com')) return 'instagram';\n  if (referrer.includes('twitter.com') || referrer.includes('x.com')) return 'twitter';\n  if (referrer.includes('linkedin.com')) return 'linkedin';\n  if (referrer.includes('youtube.com')) return 'youtube';\n  if (referrer.includes('tiktok.com')) return 'tiktok';\n  if (referrer === 'direct') return 'direct';\n  return 'other';\n}"],"names":[],"mappings":"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","debugId":null}}]
}