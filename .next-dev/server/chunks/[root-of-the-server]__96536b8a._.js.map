{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;;AAIA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO;AAC1E;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/app/api/auth/login/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nfunction getClientIP(request: NextRequest): string {\n  return request.headers.get('x-forwarded-for') ||\n         request.headers.get('x-real-ip') ||\n         '0.0.0.0';\n}\n\nfunction sanitizeInput(input: string): string {\n  // Basic sanitization to prevent common XSS and ensure input is not empty\n  if (!input) return '';\n  return input.trim().replace(/[<>\"']/g, '');\n}\n\nconst attempts = new Map<string, { count: number; resetAt: number }>();\nconst WINDOW_MS = 15 * 60 * 1000; // 15 minutes\nconst MAX_ATTEMPTS = 10;\n\nexport async function POST(request: NextRequest) {\n  try {\n    const ip = getClientIP(request);\n    const now = Date.now();\n    const rec = attempts.get(ip);\n    if (rec && rec.resetAt > now && rec.count >= MAX_ATTEMPTS) {\n      return NextResponse.json({ error: 'محاولات كثيرة، حاول لاحقاً' }, { status: 429 });\n    }\n\n    const { username, password } = await request.json();\n\n    // تنظيف المدخلات\n    const cleanUsername = sanitizeInput(username);\n    const cleanPassword = sanitizeInput(password);\n\n    if (!cleanUsername || !cleanPassword) {\n      return NextResponse.json(\n        { error: 'اسم المستخدم وكلمة المرور مطلوبان' },\n        { status: 400 }\n      );\n    }\n\n    // البحث عن المدير في قاعدة البيانات\n    const admin = await prisma.admins.findUnique({\n      where: { username: cleanUsername }\n    });\n\n    if (!admin) {\n      const recFail = attempts.get(ip);\n      if (!recFail || recFail.resetAt <= now) {\n        attempts.set(ip, { count: 1, resetAt: now + WINDOW_MS });\n      } else {\n        attempts.set(ip, { count: recFail.count + 1, resetAt: recFail.resetAt });\n      }\n      return NextResponse.json(\n        { error: 'اسم المستخدم أو كلمة المرور غير صحيحة' },\n        { status: 401 }\n      );\n    }\n\n    // التحقق من كلمة المرور\n    const isPasswordValid = await bcrypt.compare(cleanPassword, admin.password);\n\n    if (!isPasswordValid) {\n      const recFail = attempts.get(ip);\n      if (!recFail || recFail.resetAt <= now) {\n        attempts.set(ip, { count: 1, resetAt: now + WINDOW_MS });\n      } else {\n        attempts.set(ip, { count: recFail.count + 1, resetAt: recFail.resetAt });\n      }\n      return NextResponse.json(\n        { error: 'اسم المستخدم أو كلمة المرور غير صحيحة' },\n        { status: 401 }\n      );\n    }\n\n    // إنشاء JWT token\n    const token = jwt.sign(\n      {\n        adminId: admin.id,\n        username: admin.username\n      },\n      process.env.JWT_SECRET || 'default-secret-key-change-in-production', // Changed default secret\n      { expiresIn: '24h' }\n    );\n\n    // تحديث تاريخ آخر تسجيل دخول\n    await prisma.admins.update({ // Corrected model name to 'admins'\n      where: { id: admin.id },\n      data: {\n        lastLogin: new Date(),\n        loginCount: (admin.loginCount || 0) + 1, // Ensure loginCount is handled if null\n        updatedAt: new Date() // Assuming an updatedAt field exists\n      }\n    });\n\n    // نجاح: تصفير عداد المحاولات لهذا الـ IP\n    attempts.delete(ip);\n\n    // إنشاء الاستجابة مع الكوكيز\n    const response = NextResponse.json({\n      success: true,\n      admin: {\n        id: admin.id,\n        username: admin.username,\n        email: admin.email,\n        fullName: admin.fullName // Assuming fullName exists in the Admin model\n      },\n      message: 'تم تسجيل الدخول بنجاح'\n    });\n\n    // إعداد الكوكيز الآمنة\n    response.cookies.set('admin-token', token, {\n      httpOnly: true,\n      secure: true,\n      sameSite: 'none',\n      maxAge: 24 * 60 * 60, // seconds\n      path: '/'\n    });\n\n    // The original code also set a 'session-id' cookie, which is removed here as per the edited snippet.\n    // If session management is still required, it should be handled explicitly.\n\n    return response;\n\n  } catch (error) {\n    console.error('خطأ في تسجيل الدخول:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ في الخادم' },\n      { status: 500 }\n    );\n  }\n}\n\n// The PUT function from the original code is removed as it's not part of the provided edited snippet.\n// If the intention was to keep it, it should have been included in the edited snippet.\n"],"names":[],"mappings":"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","debugId":null}}]
}