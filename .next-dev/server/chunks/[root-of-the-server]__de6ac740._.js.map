{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/lib/security.ts"],"sourcesContent":["\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport type { NextRequest } from 'next/server';\n\n// نظام Rate Limiting مخصص للـ Edge Runtime\nclass EdgeRateLimit {\n  private attempts = new Map<string, { count: number; resetTime: number }>();\n  private readonly windowMs: number;\n  private readonly maxAttempts: number;\n\n  constructor(windowMs: number, maxAttempts: number) {\n    this.windowMs = windowMs;\n    this.maxAttempts = maxAttempts;\n  }\n\n  check(identifier: string): { allowed: boolean; remaining: number; resetTime: number } {\n    const now = Date.now();\n    const record = this.attempts.get(identifier);\n\n    if (!record || now > record.resetTime) {\n      // إنشاء سجل جديد أو إعادة تعيين\n      this.attempts.set(identifier, {\n        count: 1,\n        resetTime: now + this.windowMs\n      });\n      return {\n        allowed: true,\n        remaining: this.maxAttempts - 1,\n        resetTime: now + this.windowMs\n      };\n    }\n\n    if (record.count >= this.maxAttempts) {\n      return {\n        allowed: false,\n        remaining: 0,\n        resetTime: record.resetTime\n      };\n    }\n\n    record.count++;\n    return {\n      allowed: true,\n      remaining: this.maxAttempts - record.count,\n      resetTime: record.resetTime\n    };\n  }\n\n  cleanup() {\n    const now = Date.now();\n    for (const [key, record] of this.attempts.entries()) {\n      if (now > record.resetTime) {\n        this.attempts.delete(key);\n      }\n    }\n  }\n}\n\n// إنشاء محدد معدل للدخول: 5 محاولات كل 15 دقيقة\nexport const loginRateLimit = new EdgeRateLimit(15 * 60 * 1000, 5);\n\n// محدد معدل للـ API: 100 طلب كل 15 دقيقة\nexport const apiRateLimit = new EdgeRateLimit(15 * 60 * 1000, 100);\n\n// تنظيف دوري كل 30 دقيقة\nsetInterval(() => {\n  loginRateLimit.cleanup();\n  apiRateLimit.cleanup();\n}, 30 * 60 * 1000);\n\n// التحقق من صحة كلمة المرور\nexport const validatePassword = (password: string): { valid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  if (password.length < 8) {\n    errors.push('كلمة المرور يجب أن تكون 8 أحرف على الأقل');\n  }\n\n  if (!/[A-Z]/.test(password)) {\n    errors.push('كلمة المرور يجب أن تحتوي على حرف كبير واحد على الأقل');\n  }\n\n  if (!/[a-z]/.test(password)) {\n    errors.push('كلمة المرور يجب أن تحتوي على حرف صغير واحد على الأقل');\n  }\n\n  if (!/\\d/.test(password)) {\n    errors.push('كلمة المرور يجب أن تحتوي على رقم واحد على الأقل');\n  }\n\n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push('كلمة المرور يجب أن تحتوي على رمز خاص واحد على الأقل');\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors\n  };\n};\n\n// تشفير كلمة المرور المحسن\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 14; // مستوى تشفير عالي للأمان\n  return await bcrypt.hash(password, saltRounds);\n};\n\n// مقارنة كلمة المرور الآمنة\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return await bcrypt.compare(password, hash);\n};\n\n// إنتاج JWT token مع أمان محسن\nexport const generateToken = (payload: any, expiresIn = '24h'): string => {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET is not defined');\n  }\n\n  return jwt.sign(\n    {\n      ...payload,\n      iat: Math.floor(Date.now() / 1000),\n      jti: generateSecureId(), // JWT ID لإلغاء الرموز\n    },\n    secret,\n    {\n      expiresIn,\n      algorithm: 'HS256',\n      issuer: 'aldeyar-jeddah',\n      audience: 'aldeyar-admin'\n    }\n  );\n};\n\n// التحقق من JWT token\nexport const verifyToken = (token: string): any => {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET is not defined');\n  }\n\n  try {\n    return jwt.verify(token, secret, {\n      issuer: 'aldeyar-jeddah',\n      audience: 'aldeyar-admin'\n    });\n  } catch (error) {\n    throw new Error('Invalid token');\n  }\n};\n\n// إنتاج معرف آمن عشوائي\nexport const generateSecureId = (): string => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < 32; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n};\n\n// تنظيف البيانات المدخلة\nexport const sanitizeInput = (input: unknown): string => {\n  if (typeof input !== 'string') return '';\n\n  return input\n    .trim()\n    .replace(/[<>\\\"']/g, '') // إزالة الأحرف الخطيرة\n    .replace(/\\s+/g, ' ') // تطبيع المسافات\n    .slice(0, 1000); // حد الطول\n};\n\n// منع SQL injection (للاستعلامات المباشرة)\nexport const escapeSQL = (input: string): string => {\n  if (typeof input !== 'string') return '';\n  return input.replace(/'/g, \"''\");\n};\n\n// حماية XSS\nexport const escapeHtml = (unsafe: string): string => {\n  if (typeof unsafe !== 'string') return '';\n\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n};\n\n// إنتاج والتحقق من CSRF token\nexport const generateCSRFToken = (): string => {\n  return generateSecureId();\n};\n\nexport const validateCSRFToken = (token: string, storedToken: string): boolean => {\n  return token === storedToken;\n};\n\n// إدارة الجلسات\ninterface Session {\n  id: string;\n  adminId: string;\n  createdAt: Date;\n  lastActivity: Date;\n  ipAddress: string;\n  userAgent: string;\n}\n\nclass SessionManager {\n  private sessions = new Map<string, Session>();\n  private readonly maxSessions = 5; // أقصى عدد جلسات متزامنة لكل مدير\n  private readonly sessionTimeout = 24 * 60 * 60 * 1000; // 24 ساعة\n\n  createSession(adminId: string, ipAddress: string, userAgent: string): string {\n    const sessionId = generateSecureId();\n    const now = new Date();\n\n    // إزالة الجلسات القديمة لهذا المدير\n    this.cleanupAdminSessions(adminId);\n\n    const session: Session = {\n      id: sessionId,\n      adminId,\n      createdAt: now,\n      lastActivity: now,\n      ipAddress,\n      userAgent\n    };\n\n    this.sessions.set(sessionId, session);\n    return sessionId;\n  }\n\n  validateSession(sessionId: string): Session | null {\n    const session = this.sessions.get(sessionId);\n    if (!session) return null;\n\n    // فحص انتهاء صلاحية الجلسة\n    if (Date.now() - session.lastActivity.getTime() > this.sessionTimeout) {\n      this.sessions.delete(sessionId);\n      return null;\n    }\n\n    // تحديث آخر نشاط\n    session.lastActivity = new Date();\n    return session;\n  }\n\n  destroySession(sessionId: string): void {\n    this.sessions.delete(sessionId);\n  }\n\n  destroyAdminSessions(adminId: string): void {\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.adminId === adminId) {\n        this.sessions.delete(sessionId);\n      }\n    }\n  }\n\n  private cleanupAdminSessions(adminId: string): void {\n    const adminSessions = Array.from(this.sessions.entries())\n      .filter(([_, session]) => session.adminId === adminId)\n      .sort(([_, a], [__, b]) => b.lastActivity.getTime() - a.lastActivity.getTime());\n\n    // الاحتفاظ بالجلسات الأحدث فقط\n    if (adminSessions.length >= this.maxSessions) {\n      const sessionsToRemove = adminSessions.slice(this.maxSessions - 1);\n      for (const [sessionId] of sessionsToRemove) {\n        this.sessions.delete(sessionId);\n      }\n    }\n  }\n\n  cleanupExpiredSessions(): void {\n    const now = Date.now();\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (now - session.lastActivity.getTime() > this.sessionTimeout) {\n        this.sessions.delete(sessionId);\n      }\n    }\n  }\n}\n\nexport const sessionManager = new SessionManager();\n\n// التحقق من صحة الطلب\nexport const validateRequest = (request: NextRequest) => {\n  const contentType = request.headers.get('content-type');\n  const userAgent = request.headers.get('user-agent');\n\n  // التحقق من نوع المحتوى للطلبات POST/PUT\n  if (['POST', 'PUT', 'PATCH'].includes(request.method)) {\n    if (!contentType || !contentType.includes('application/json')) {\n      throw new Error('Invalid content type');\n    }\n  }\n\n  // التحقق من user agent\n  if (!userAgent || userAgent.length < 10) {\n    throw new Error('Invalid user agent');\n  }\n};\n\n// استخراج عنوان IP\nexport const getClientIP = (request: NextRequest): string => {\n  const forwarded = request.headers.get('x-forwarded-for');\n  const realIP = request.headers.get('x-real-ip');\n  const connIP = request.headers.get('x-connecting-ip');\n\n  if (forwarded) {\n    return forwarded.split(',')[0].trim();\n  }\n\n  if (realIP) {\n    return realIP;\n  }\n\n  if (connIP) {\n    return connIP;\n  }\n\n  return 'unknown';\n};\n\n// سجل التدقيق\ninterface AuditLog {\n  timestamp: Date;\n  adminId: string;\n  action: string;\n  resource: string;\n  ipAddress: string;\n  userAgent: string;\n  success: boolean;\n  details?: any;\n}\n\nclass AuditLogger {\n  private logs: AuditLog[] = [];\n  private readonly maxLogs = 10000;\n\n  log(entry: Omit<AuditLog, 'timestamp'>): void {\n    const auditEntry: AuditLog = {\n      ...entry,\n      timestamp: new Date()\n    };\n\n    this.logs.push(auditEntry);\n\n    // الاحتفاظ بالسجلات الحديثة فقط\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(-this.maxLogs);\n    }\n\n    // في الإنتاج، يجب حفظ هذا في قاعدة البيانات\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Audit Log:', auditEntry);\n    }\n  }\n\n  getLogs(adminId?: string, limit = 100): AuditLog[] {\n    let filteredLogs = this.logs;\n\n    if (adminId) {\n      filteredLogs = this.logs.filter(log => log.adminId === adminId);\n    }\n\n    return filteredLogs\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const auditLogger = new AuditLogger();\n\n// مساعد التحقق من المصادقة\nexport const authenticateAdmin = async (request: NextRequest): Promise<any> => {\n  const token = request.cookies.get('admin-token')?.value;\n\n  if (!token) {\n    throw new Error('No authentication token provided');\n  }\n\n  try {\n    const decoded = verifyToken(token);\n\n    // التحقق من الجلسة\n    const sessionId = request.cookies.get('session-id')?.value;\n    if (sessionId) {\n      const session = sessionManager.validateSession(sessionId);\n      if (!session || session.adminId !== decoded.adminId) {\n        throw new Error('Invalid session');\n      }\n    }\n\n    return decoded;\n  } catch (error) {\n    throw new Error('Invalid authentication token');\n  }\n};\n\n// رؤوس الأمان\nexport const securityHeaders = {\n  'X-Content-Type-Options': 'nosniff',\n  'X-Frame-Options': 'DENY',\n  'X-XSS-Protection': '1; mode=block',\n  'Referrer-Policy': 'strict-origin-when-cross-origin',\n  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\n  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n  'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; media-src 'self' https:;\"\n};\n\nexport default {\n  validatePassword,\n  hashPassword,\n  comparePassword,\n  generateToken,\n  verifyToken,\n  sanitizeInput,\n  escapeHtml,\n  sessionManager,\n  auditLogger,\n  authenticateAdmin,\n  securityHeaders,\n  getClientIP,\n  validateRequest,\n  loginRateLimit,\n  apiRateLimit\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/app/api/auth/logout/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { sessionManager, auditLogger, getClientIP } from '@/lib/security';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const sessionId = request.cookies.get('session-id')?.value;\n\n    if (sessionId) {\n      // تدمير الجلسة\n      sessionManager.destroySession(sessionId);\n    }\n\n    // تسجيل الخروج في السجل\n    auditLogger.log({\n      adminId: 'unknown',\n      action: 'LOGOUT',\n      resource: 'auth',\n      ipAddress: getClientIP(request),\n      userAgent: request.headers.get('user-agent') || 'unknown',\n      success: true\n    });\n\n    // إنشاء الاستجابة وإزالة الكوكيز\n    const response = NextResponse.json({\n      success: true,\n      message: 'تم تسجيل الخروج بنجاح'\n    });\n\n    // إزالة الكوكيز\n    response.cookies.delete('admin-token');\n    response.cookies.delete('session-id');\n\n    return response;\n\n  } catch (error) {\n    console.error('خطأ في تسجيل الخروج:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ في تسجيل الخروج' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const response = NextResponse.redirect(new URL('/login', request.url));\n  \n  // حذف الكوكيز\n  response.cookies.delete('admin-token');\n  response.cookies.delete('session-id');\n  \n  return response;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;QAErD,IAAI,WAAW;YACb,eAAe;YACf,wHAAA,CAAA,iBAAc,CAAC,cAAc,CAAC;QAChC;QAEA,wBAAwB;QACxB,wHAAA,CAAA,cAAW,CAAC,GAAG,CAAC;YACd,SAAS;YACT,QAAQ;YACR,UAAU;YACV,WAAW,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD,EAAE;YACvB,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;YAChD,SAAS;QACX;QAEA,iCAAiC;QACjC,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACjC,SAAS;YACT,SAAS;QACX;QAEA,gBAAgB;QAChB,SAAS,OAAO,CAAC,MAAM,CAAC;QACxB,SAAS,OAAO,CAAC,MAAM,CAAC;QAExB,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAEpE,cAAc;IACd,SAAS,OAAO,CAAC,MAAM,CAAC;IACxB,SAAS,OAAO,CAAC,MAAM,CAAC;IAExB,OAAO;AACT","debugId":null}}]
}