{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;;AAIA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO;AAC1E;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///app/code/src/app/api/projects/%5Bid%5D/comments/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { headers } from 'next/headers';\n\n// نموذج التحقق من بيانات التعليق\ninterface CommentRequest {\n  name: string;\n  email?: string;\n  message: string;\n  rating: number;\n}\n\n// دالة التحقق من صحة البيانات\nfunction validateComment(data: any): { valid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  // التحقق من الاسم\n  if (!data.name || typeof data.name !== 'string' || !data.name.trim()) {\n    errors.push('الاسم مطلوب ولا يمكن أن يكون فارغاً');\n  } else {\n    const nameLength = data.name.trim().length;\n    if (nameLength < 2) {\n      errors.push('الاسم يجب أن يكون على الأقل حرفين');\n    } else if (nameLength > 50) {\n      errors.push('الاسم يجب أن يكون أقل من 50 حرف');\n    }\n  }\n\n  // التحقق من البريد الإلكتروني (اختياري)\n  if (data.email && typeof data.email === 'string' && data.email.trim()) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(data.email.trim())) {\n      errors.push('البريد الإلكتروني غير صحيح');\n    }\n  }\n\n  // التحقق من التعليق\n  if (!data.message || typeof data.message !== 'string' || !data.message.trim()) {\n    errors.push('التعليق مطلوب ولا يمكن أن يكون فارغاً');\n  } else {\n    const messageLength = data.message.trim().length;\n    if (messageLength < 5) {\n      errors.push('التعليق يجب أن يكون على الأقل 5 أحرف');\n    } else if (messageLength > 500) {\n      errors.push('التعليق يجب أن يكون أقل من 500 حرف');\n    }\n  }\n\n  // التحقق من التقييم\n  if (data.rating === null || data.rating === undefined || typeof data.rating !== 'number') {\n    errors.push('التقييم مطلوب');\n  } else if (!Number.isInteger(data.rating) || data.rating < 1 || data.rating > 5) {\n    errors.push('التقييم يجب أن يكون رقم صحيح بين 1 و 5');\n  }\n\n  return { valid: errors.length === 0, errors };\n}\n\n// GET - جلب التعليقات\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const projectId = parseInt(params.id);\n\n    if (isNaN(projectId)) {\n      return NextResponse.json(\n        { error: 'معرف المشروع غير صالح' },\n        { status: 400 }\n      );\n    }\n\n    // التحقق من وجود المشروع أولاً\n    const project = await prisma.projects.findUnique({\n      where: { id: projectId },\n      select: { id: true }\n    });\n\n    if (!project) {\n      return NextResponse.json(\n        { error: 'المشروع غير موجود' },\n        { status: 404 }\n      );\n    }\n\n    // إرجاع مصفوفة فارغة بدلاً من استعلام التعليقات حتى يتم إصلاح قاعدة البيانات\n    const comments: any[] = [];\n\n    return NextResponse.json(comments);\n  } catch (error) {\n    console.error('خطأ في جلب التعليق��ت:', error);\n    return NextResponse.json(\n      { error: 'خطأ في جلب التعليقات' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - إضافة تعليق جديد\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const resolvedParams = await params;\n    const projectId = resolvedParams.id;\n    const body = await request.json();\n\n    // التحقق من صحة البيانات\n    const validation = validateComment(body);\n    if (!validation.valid) {\n      return NextResponse.json(\n        {\n          error: 'بيانات غير صحيحة',\n          details: validation.errors\n        },\n        { status: 400 }\n      );\n    }\n\n    const { name, email, message, rating } = body;\n\n    // التحقق من وجود المشروع\n    const project = await prisma.projects.findUnique({\n      where: { id: projectId }\n    });\n\n    if (!project) {\n      return NextResponse.json(\n        { error: 'المشروع غير موجود' },\n        { status: 404 }\n      );\n    }\n\n    // منع التعليقات المكررة من نفس الاسم في فترة قصيرة (10 دقائق)\n    const recentComment = await prisma.comments.findFirst({\n      where: {\n        projectId,\n        name: name.trim(),\n        createdAt: {\n          gte: new Date(Date.now() - 10 * 60 * 1000) // آخر 10 دقائق\n        }\n      }\n    });\n\n    if (recentComment) {\n      return NextResponse.json(\n        { error: 'لقد أضفت تعليقاً مؤخراً. يرجى الانتظار قبل إضافة تعليق آخر' },\n        { status: 429 }\n      );\n    }\n\n    // إضافة التعليق\n    const newComment = await prisma.comments.create({\n      data: {\n        projectId,\n        name: name.trim(),\n        message: message.trim(),\n        rating\n      },\n      select: {\n        id: true,\n        name: true,\n        message: true,\n        rating: true,\n        createdAt: true\n      }\n    });\n\n    // تحديث متوسط التقييم للمشروع\n    const allComments = await prisma.comments.findMany({\n      where: { projectId },\n      select: { rating: true }\n    });\n\n    if (allComments.length > 0) {\n      const averageRating = allComments.reduce((sum, comment) => sum + comment.rating, 0) / allComments.length;\n\n      await prisma.projects.update({\n        where: { id: projectId },\n        data: { rating: averageRating }\n      });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'تم إضافة التعليق بنجاح',\n      comment: {\n        ...newComment,\n        createdAt: newComment.createdAt.toISOString(),\n        avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(newComment.name)}&background=059669&color=fff`\n      }\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('خطأ في إضافة التعليق:', error);\n    return NextResponse.json(\n      { error: 'حدث خطأ في إضافة التعليق' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}