{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/node_modules/q/q.js"],"sourcesContent":["// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"],"names":[],"mappings":"AAAA,uBAAuB;AACvB;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GAED,CAAC,SAAU,UAAU;IACjB;IAEA,kEAAkE;IAClE,6DAA6D;IAC7D,+DAA+D;IAC/D,gEAAgE;IAEhE,kBAAkB;IAClB,IAAI,OAAO,cAAc,YAAY;QACjC,UAAU,WAAW;IAEzB,WAAW;IACX,OAAO,wCAA+D;QAClE,OAAO,OAAO,GAAG;IAErB,YAAY;IACZ;;QAaI,2DAA2D;QAC3D,yBAAyB;QACzB,IAAI;QAEJ,sDAAsD;QACtD,gCAAgC;QAChC,IAAI;IA29Dy+i4//H;AA78Dr/i4//H,CAAC,EAAE;IACH;IAEA,IAAI,YAAY;IAChB,IAAI;QACA,MAAM,IAAI;IACd,EAAE,OAAO,GAAG;QACR,YAAY,CAAC,CAAC,EAAE,KAAK;IACzB;IAEA,wEAAwE;IACxE,QAAQ;IACR,IAAI,gBAAgB;IACpB,IAAI;IAEJ,QAAQ;IAER,qCAAqC;IACrC,IAAI,OAAO,YAAa;IAExB,oEAAoE;IACpE,qBAAqB;IACrB,IAAI,WAAU,AAAC;QACX,gDAAgD;QAChD,IAAI,OAAO;YAAC,MAAM,KAAK;YAAG,MAAM;QAAI;QACpC,IAAI,OAAO;QACX,IAAI,WAAW;QACf,IAAI,cAAc,KAAK;QACvB,IAAI,WAAW;QACf,6DAA6D;QAC7D,IAAI,aAAa,EAAE;QAEnB,SAAS;YACL,yBAAyB,GACzB,IAAI,MAAM;YAEV,MAAO,KAAK,IAAI,CAAE;gBACd,OAAO,KAAK,IAAI;gBAChB,OAAO,KAAK,IAAI;gBAChB,KAAK,IAAI,GAAG,KAAK;gBACjB,SAAS,KAAK,MAAM;gBAEpB,IAAI,QAAQ;oBACR,KAAK,MAAM,GAAG,KAAK;oBACnB,OAAO,KAAK;gBAChB;gBACA,UAAU,MAAM;YAEpB;YACA,MAAO,WAAW,MAAM,CAAE;gBACtB,OAAO,WAAW,GAAG;gBACrB,UAAU;YACd;YACA,WAAW;QACf;QACA,4CAA4C;QAC5C,SAAS,UAAU,IAAI,EAAE,MAAM;YAC3B,IAAI;gBACA;YAEJ,EAAE,OAAO,GAAG;gBACR,IAAI,UAAU;oBACV,4DAA4D;oBAC5D,qDAAqD;oBAErD,8DAA8D;oBAC9D,0DAA0D;oBAC1D,kDAAkD;oBAClD,IAAI,QAAQ;wBACR,OAAO,IAAI;oBACf;oBACA,WAAW,OAAO;oBAClB,IAAI,QAAQ;wBACR,OAAO,KAAK;oBAChB;oBAEA,MAAM;gBAEV,OAAO;oBACH,kDAAkD;oBAClD,oDAAoD;oBACpD,WAAW;wBACP,MAAM;oBACV,GAAG;gBACP;YACJ;YAEA,IAAI,QAAQ;gBACR,OAAO,IAAI;YACf;QACJ;QAEA,WAAW,SAAU,IAAI;YACrB,OAAO,KAAK,IAAI,GAAG;gBACf,MAAM;gBACN,QAAQ,YAAY,QAAQ,MAAM;gBAClC,MAAM;YACV;YAEA,IAAI,CAAC,UAAU;gBACX,WAAW;gBACX;YACJ;QACJ;QAEA,IAAI,OAAO,YAAY,YACnB,QAAQ,QAAQ,OAAO,sBAAsB,QAAQ,QAAQ,EAAE;YAC/D,qEAAqE;YACrE,yCAAyC;YACzC,wEAAwE;YACxE,gEAAgE;YAChE,mEAAmE;YACnE,4DAA4D;YAC5D,wDAAwD;YACxD,oDAAoD;YACpD,WAAW;YAEX,cAAc;gBACV,QAAQ,QAAQ,CAAC;YACrB;QAEJ,OAAO,IAAI,OAAO,iBAAiB,YAAY;YAC3C,oEAAoE;YACpE;;iBAEO;gBACH,cAAc;oBACV,aAAa;gBACjB;YACJ;QAEJ,OAAO,IAAI,OAAO,mBAAmB,aAAa;YAC9C,kBAAkB;YAClB,wDAAwD;YACxD,IAAI,UAAU,IAAI;YAClB,yEAAyE;YACzE,qDAAqD;YACrD,QAAQ,KAAK,CAAC,SAAS,GAAG;gBACtB,cAAc;gBACd,QAAQ,KAAK,CAAC,SAAS,GAAG;gBAC1B;YACJ;YACA,IAAI,kBAAkB;gBAClB,gEAAgE;gBAChE,qBAAqB;gBACrB,QAAQ,KAAK,CAAC,WAAW,CAAC;YAC9B;YACA,cAAc;gBACV,WAAW,OAAO;gBAClB;YACJ;QAEJ,OAAO;YACH,eAAe;YACf,cAAc;gBACV,WAAW,OAAO;YACtB;QACJ;QACA,kDAAkD;QAClD,uEAAuE;QACvE,yCAAyC;QACzC,SAAS,QAAQ,GAAG,SAAU,IAAI;YAC9B,WAAW,IAAI,CAAC;YAChB,IAAI,CAAC,UAAU;gBACX,WAAW;gBACX;YACJ;QACJ;QACA,OAAO;IACX;IAEA,0DAA0D;IAC1D,iBAAiB;IACjB,iDAAiD;IACjD,iEAAiE;IACjE,oEAAoE;IACpE,+BAA+B;IAC/B,4EAA4E;IAC5E,uDAAuD;IACvD,mDAAmD;IACnD,2EAA2E;IAC3E,IAAI,OAAO,SAAS,IAAI;IACxB,SAAS,YAAY,CAAC;QAClB,OAAO;YACH,OAAO,KAAK,KAAK,CAAC,GAAG;QACzB;IACJ;IACA,kCAAkC;IAClC,wDAAwD;IACxD,gCAAgC;IAEhC,IAAI,cAAc,YAAY,MAAM,SAAS,CAAC,KAAK;IAEnD,IAAI,eAAe,YACf,MAAM,SAAS,CAAC,MAAM,IAAI,SAAU,QAAQ,EAAE,KAAK;QAC/C,IAAI,QAAQ,GACR,SAAS,IAAI,CAAC,MAAM;QACxB,uDAAuD;QACvD,IAAI,UAAU,MAAM,KAAK,GAAG;YACxB,mDAAmD;YACnD,gDAAgD;YAChD,GAAG;gBACC,IAAI,SAAS,IAAI,EAAE;oBACf,QAAQ,IAAI,CAAC,QAAQ;oBACrB;gBACJ;gBACA,IAAI,EAAE,SAAS,QAAQ;oBACnB,MAAM,IAAI;gBACd;YACJ,QAAS,EAAG;QAChB;QACA,SAAS;QACT,MAAO,QAAQ,QAAQ,QAAS;YAC5B,uDAAuD;YACvD,IAAI,SAAS,IAAI,EAAE;gBACf,QAAQ,SAAS,OAAO,IAAI,CAAC,MAAM,EAAE;YACzC;QACJ;QACA,OAAO;IACX;IAGJ,IAAI,gBAAgB,YAChB,MAAM,SAAS,CAAC,OAAO,IAAI,SAAU,KAAK;QACtC,8DAA8D;QAC9D,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,IAAK;YAClC,IAAI,IAAI,CAAC,EAAE,KAAK,OAAO;gBACnB,OAAO;YACX;QACJ;QACA,OAAO,CAAC;IACZ;IAGJ,IAAI,YAAY,YACZ,MAAM,SAAS,CAAC,GAAG,IAAI,SAAU,QAAQ,EAAE,KAAK;QAC5C,IAAI,OAAO,IAAI;QACf,IAAI,UAAU,EAAE;QAChB,aAAa,MAAM,SAAU,UAAS,EAAE,KAAK,EAAE,KAAK;YAChD,QAAQ,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,OAAO,OAAO;QACpD,GAAG,KAAK;QACR,OAAO;IACX;IAGJ,IAAI,gBAAgB,OAAO,MAAM,IAAI,SAAU,SAAS;QACpD,SAAS,QAAS;QAClB,KAAK,SAAS,GAAG;QACjB,OAAO,IAAI;IACf;IAEA,IAAI,wBAAwB,OAAO,cAAc,IAAI,SAAU,GAAG,EAAE,IAAI,EAAE,UAAU;QAChF,GAAG,CAAC,KAAK,GAAG,WAAW,KAAK;QAC5B,OAAO;IACX;IAEA,IAAI,wBAAwB,YAAY,OAAO,SAAS,CAAC,cAAc;IAEvE,IAAI,cAAc,OAAO,IAAI,IAAI,SAAU,MAAM;QAC7C,IAAI,OAAO,EAAE;QACb,IAAK,IAAI,OAAO,OAAQ;YACpB,IAAI,sBAAsB,QAAQ,MAAM;gBACpC,KAAK,IAAI,CAAC;YACd;QACJ;QACA,OAAO;IACX;IAEA,IAAI,kBAAkB,YAAY,OAAO,SAAS,CAAC,QAAQ;IAE3D,SAAS,SAAS,KAAK;QACnB,OAAO,UAAU,OAAO;IAC5B;IAEA,0BAA0B;IAE1B,uEAAuE;IACvE,SAAS,gBAAgB,SAAS;QAC9B,OACI,gBAAgB,eAAe,4BAC/B,qBAAqB;IAE7B;IAEA,oEAAoE;IACpE,gBAAgB;IAChB,IAAI;IACJ,IAAI,OAAO,gBAAgB,aAAa;QACpC,eAAe;IACnB,OAAO;QACH,eAAe,SAAU,KAAK;YAC1B,IAAI,CAAC,KAAK,GAAG;QACjB;IACJ;IAEA,oBAAoB;IAEpB,IAAI,uBAAuB;IAE3B,SAAS,mBAAmB,KAAK,EAAE,OAAO;QACtC,sEAAsE;QACtE,wEAAwE;QACxE,IAAI,aACA,QAAQ,KAAK,IACb,OAAO,UAAU,YACjB,UAAU,QACV,MAAM,KAAK,EACb;YACE,IAAI,SAAS,EAAE;YACf,IAAK,IAAI,IAAI,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,MAAM,CAAE;gBACrC,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,MAAM,uBAAuB,IAAI,MAAM,uBAAuB,GAAG,EAAE,YAAY,GAAG;oBAC/F,sBAAsB,OAAO,2BAA2B;wBAAC,OAAO,EAAE,YAAY;wBAAE,cAAc;oBAAI;oBAClG,OAAO,OAAO,CAAC,EAAE,KAAK;gBAC1B;YACJ;YACA,OAAO,OAAO,CAAC,MAAM,KAAK;YAE1B,IAAI,iBAAiB,OAAO,IAAI,CAAC,OAAO,uBAAuB;YAC/D,IAAI,QAAQ,kBAAkB;YAC9B,sBAAsB,OAAO,SAAS;gBAAC,OAAO;gBAAO,cAAc;YAAI;QAC3E;IACJ;IAEA,SAAS,kBAAkB,WAAW;QAClC,IAAI,QAAQ,YAAY,KAAK,CAAC;QAC9B,IAAI,eAAe,EAAE;QACrB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,EAAE,EAAG;YACnC,IAAI,OAAO,KAAK,CAAC,EAAE;YAEnB,IAAI,CAAC,gBAAgB,SAAS,CAAC,YAAY,SAAS,MAAM;gBACtD,aAAa,IAAI,CAAC;YACtB;QACJ;QACA,OAAO,aAAa,IAAI,CAAC;IAC7B;IAEA,SAAS,YAAY,SAAS;QAC1B,OAAO,UAAU,OAAO,CAAC,mBAAmB,CAAC,KACtC,UAAU,OAAO,CAAC,iBAAiB,CAAC;IAC/C;IAEA,SAAS,yBAAyB,SAAS;QACvC,wEAAwE;QACxE,mEAAmE;QACnE,IAAI,WAAW,gCAAgC,IAAI,CAAC;QACpD,IAAI,UAAU;YACV,OAAO;gBAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO,QAAQ,CAAC,EAAE;aAAE;QAC7C;QAEA,6DAA6D;QAC7D,IAAI,WAAW,4BAA4B,IAAI,CAAC;QAChD,IAAI,UAAU;YACV,OAAO;gBAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO,QAAQ,CAAC,EAAE;aAAE;QAC7C;QAEA,wEAAwE;QACxE,IAAI,WAAW,iBAAiB,IAAI,CAAC;QACrC,IAAI,UAAU;YACV,OAAO;gBAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO,QAAQ,CAAC,EAAE;aAAE;QAC7C;IACJ;IAEA,SAAS,gBAAgB,SAAS;QAC9B,IAAI,wBAAwB,yBAAyB;QAErD,IAAI,CAAC,uBAAuB;YACxB,OAAO;QACX;QAEA,IAAI,WAAW,qBAAqB,CAAC,EAAE;QACvC,IAAI,aAAa,qBAAqB,CAAC,EAAE;QAEzC,OAAO,aAAa,aAChB,cAAc,iBACd,cAAc;IACtB;IAEA,mEAAmE;IACnE,SAAS;IACT,SAAS;QACL,IAAI,CAAC,WAAW;YACZ;QACJ;QAEA,IAAI;YACA,MAAM,IAAI;QACd,EAAE,OAAO,GAAG;YACR,IAAI,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC;YAC1B,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,IAAI,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE;YAC/D,IAAI,wBAAwB,yBAAyB;YACrD,IAAI,CAAC,uBAAuB;gBACxB;YACJ;YAEA,YAAY,qBAAqB,CAAC,EAAE;YACpC,OAAO,qBAAqB,CAAC,EAAE;QACnC;IACJ;IAEA,SAAS,UAAU,QAAQ,EAAE,IAAI,EAAE,WAAW;QAC1C,OAAO;YACH,IAAI,OAAO,YAAY,eACnB,OAAO,QAAQ,IAAI,KAAK,YAAY;gBACpC,QAAQ,IAAI,CAAC,OAAO,yBAAyB,cAChC,aAAa,IAAI,MAAM,IAAI,KAAK;YACjD;YACA,OAAO,SAAS,KAAK,CAAC,UAAU;QACpC;IACJ;IAEA,eAAe;IACf,yBAAyB;IAEzB;;;;CAIC,GACD,SAAS,EAAE,KAAK;QACZ,wEAAwE;QACxE,2EAA2E;QAC3E,oDAAoD;QACpD,IAAI,iBAAiB,SAAS;YAC1B,OAAO;QACX;QAEA,uBAAuB;QACvB,IAAI,eAAe,QAAQ;YACvB,OAAO,OAAO;QAClB,OAAO;YACH,OAAO,QAAQ;QACnB;IACJ;IACA,EAAE,OAAO,GAAG;IAEZ;;;CAGC,GACD,EAAE,QAAQ,GAAG;IAEb;;CAEC,GACD,EAAE,gBAAgB,GAAG;IAErB;;;;;CAKC,GACD,IAAI,mBAAmB;IAEvB,uCAAuC;IACvC,IAAI,OAAO,YAAY,YAAY,WAAW,QAAQ,GAAG,IAAI,QAAQ,GAAG,CAAC,OAAO,EAAE;QAC9E,EAAE,gBAAgB,GAAG;IACzB;IAEA;;;;;;;;;CASC,GACD,EAAE,KAAK,GAAG;IACV,SAAS;QACL,2EAA2E;QAC3E,oEAAoE;QACpE,4EAA4E;QAC5E,wEAAwE;QACxE,qEAAqE;QACrE,sDAAsD;QACtD,IAAI,WAAW,EAAE,EAAE,oBAAoB,EAAE,EAAE;QAE3C,IAAI,WAAW,cAAc,MAAM,SAAS;QAC5C,IAAI,UAAU,cAAc,QAAQ,SAAS;QAE7C,QAAQ,eAAe,GAAG,SAAU,OAAO,EAAE,EAAE,EAAE,QAAQ;YACrD,IAAI,OAAO,YAAY;YACvB,IAAI,UAAU;gBACV,SAAS,IAAI,CAAC;gBACd,IAAI,OAAO,UAAU,QAAQ,CAAC,EAAE,EAAE;oBAC9B,kBAAkB,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACtC;YACJ,OAAO;gBACH,EAAE,QAAQ,CAAC;oBACP,gBAAgB,eAAe,CAAC,KAAK,CAAC,iBAAiB;gBAC3D;YACJ;QACJ;QAEA,iBAAiB;QACjB,QAAQ,OAAO,GAAG;YACd,IAAI,UAAU;gBACV,OAAO;YACX;YACA,IAAI,cAAc,OAAO;YACzB,IAAI,UAAU,cAAc;gBACxB,kBAAkB,aAAa,gBAAgB;YACnD;YACA,OAAO;QACX;QAEA,QAAQ,OAAO,GAAG;YACd,IAAI,CAAC,iBAAiB;gBAClB,OAAO;oBAAE,OAAO;gBAAU;YAC9B;YACA,OAAO,gBAAgB,OAAO;QAClC;QAEA,IAAI,EAAE,gBAAgB,IAAI,WAAW;YACjC,IAAI;gBACA,MAAM,IAAI;YACd,EAAE,OAAO,GAAG;gBACR,mEAAmE;gBACnE,gEAAgE;gBAChE,0CAA0C;gBAC1C,EAAE;gBACF,6DAA6D;gBAC7D,+CAA+C;gBAC/C,QAAQ,KAAK,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ;gBAC1D,QAAQ,YAAY,GAAG;YAC3B;QACJ;QAEA,0EAA0E;QAC1E,oEAAoE;QACpE,sEAAsE;QAEtE,SAAS,OAAO,UAAU;YACtB,kBAAkB;YAElB,IAAI,EAAE,gBAAgB,IAAI,WAAW;gBACjC,0DAA0D;gBAC1D,qCAAqC;gBACrC,QAAQ,MAAM,GAAG;YACrB;YAEA,aAAa,UAAU,SAAU,UAAS,EAAE,OAAO;gBAC/C,EAAE,QAAQ,CAAC;oBACP,WAAW,eAAe,CAAC,KAAK,CAAC,YAAY;gBACjD;YACJ,GAAG,KAAK;YAER,WAAW,KAAK;YAChB,oBAAoB,KAAK;QAC7B;QAEA,SAAS,OAAO,GAAG;QACnB,SAAS,OAAO,GAAG,SAAU,KAAK;YAC9B,IAAI,iBAAiB;gBACjB;YACJ;YAEA,OAAO,EAAE;QACb;QAEA,SAAS,OAAO,GAAG,SAAU,KAAK;YAC9B,IAAI,iBAAiB;gBACjB;YACJ;YAEA,OAAO,QAAQ;QACnB;QACA,SAAS,MAAM,GAAG,SAAU,MAAM;YAC9B,IAAI,iBAAiB;gBACjB;YACJ;YAEA,OAAO,OAAO;QAClB;QACA,SAAS,MAAM,GAAG,SAAU,QAAQ;YAChC,IAAI,iBAAiB;gBACjB;YACJ;YAEA,aAAa,mBAAmB,SAAU,UAAS,EAAE,gBAAgB;gBACjE,EAAE,QAAQ,CAAC;oBACP,iBAAiB;gBACrB;YACJ,GAAG,KAAK;QACZ;QAEA,OAAO;IACX;IAEA;;;;CAIC,GACD,MAAM,SAAS,CAAC,gBAAgB,GAAG;QAC/B,IAAI,OAAO,IAAI;QACf,OAAO,SAAU,KAAK,EAAE,KAAK;YACzB,IAAI,OAAO;gBACP,KAAK,MAAM,CAAC;YAChB,OAAO,IAAI,UAAU,MAAM,GAAG,GAAG;gBAC7B,KAAK,OAAO,CAAC,YAAY,WAAW;YACxC,OAAO;gBACH,KAAK,OAAO,CAAC;YACjB;QACJ;IACJ;IAEA;;;;;CAKC,GACD,EAAE,OAAO,GAAG,SAAS,MAAM;IAC3B,EAAE,OAAO,GAAG;IACZ,SAAS,QAAQ,QAAQ;QACrB,IAAI,OAAO,aAAa,YAAY;YAChC,MAAM,IAAI,UAAU;QACxB;QACA,IAAI,WAAW;QACf,IAAI;YACA,SAAS,SAAS,OAAO,EAAE,SAAS,MAAM,EAAE,SAAS,MAAM;QAC/D,EAAE,OAAO,QAAQ;YACb,SAAS,MAAM,CAAC;QACpB;QACA,OAAO,SAAS,OAAO;IAC3B;IAEA,QAAQ,IAAI,GAAG,MAAM,MAAM;IAC3B,QAAQ,GAAG,GAAG,KAAK,MAAM;IACzB,QAAQ,MAAM,GAAG,QAAQ,MAAM;IAC/B,QAAQ,OAAO,GAAG,GAAG,MAAM;IAE3B,0EAA0E;IAC1E,8EAA8E;IAC9E,kCAAkC;IAClC,EAAE,UAAU,GAAG,SAAU,MAAM;QAC3B,iBAAiB;QACjB,iCAAiC;QACjC,OAAO;IACX;IAEA,QAAQ,SAAS,CAAC,UAAU,GAAG;QAC3B,iBAAiB;QACjB,iCAAiC;QACjC,OAAO,IAAI;IACf;IAEA;;;;;;;;CAQC,GACD,EAAE,IAAI,GAAG,SAAU,CAAC,EAAE,CAAC;QACnB,OAAO,EAAE,GAAG,IAAI,CAAC;IACrB;IAEA,QAAQ,SAAS,CAAC,IAAI,GAAG,SAAU,IAAI;QACnC,OAAO,EAAE;YAAC,IAAI;YAAE;SAAK,EAAE,MAAM,CAAC,SAAU,CAAC,EAAE,CAAC;YACxC,IAAI,MAAM,GAAG;gBACT,2CAA2C;gBAC3C,OAAO;YACX,OAAO;gBACH,MAAM,IAAI,MAAM,iCAAiC,IAAI,MAAM;YAC/D;QACJ;IACJ;IAEA;;;;CAIC,GACD,EAAE,IAAI,GAAG;IACT,SAAS,KAAK,QAAQ;QAClB,OAAO,QAAQ,SAAU,OAAO,EAAE,MAAM;YACpC,iDAAiD;YACjD,wCAAwC;YACxC,wCAAwC;YACxC,MAAM;YACN,2BAA2B;YAC3B,IAAK,IAAI,IAAI,GAAG,MAAM,SAAS,MAAM,EAAE,IAAI,KAAK,IAAK;gBACjD,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS;YACjC;QACJ;IACJ;IAEA,QAAQ,SAAS,CAAC,IAAI,GAAG;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI;IAC3B;IAEA;;;;;;;;;;CAUC,GACD,EAAE,WAAW,GAAG;IAChB,SAAS,QAAQ,UAAU,EAAE,QAAQ,EAAE,OAAO;QAC1C,IAAI,aAAa,KAAK,GAAG;YACrB,WAAW,SAAU,EAAE;gBACnB,OAAO,OAAO,IAAI,MACd,yCAAyC;YAEjD;QACJ;QACA,IAAI,YAAY,KAAK,GAAG;YACpB,UAAU;gBACN,OAAO;oBAAC,OAAO;gBAAS;YAC5B;QACJ;QAEA,IAAI,UAAU,cAAc,QAAQ,SAAS;QAE7C,QAAQ,eAAe,GAAG,SAAU,OAAO,EAAE,EAAE,EAAE,IAAI;YACjD,IAAI;YACJ,IAAI;gBACA,IAAI,UAAU,CAAC,GAAG,EAAE;oBAChB,SAAS,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS;gBAC3C,OAAO;oBACH,SAAS,SAAS,IAAI,CAAC,SAAS,IAAI;gBACxC;YACJ,EAAE,OAAO,WAAW;gBAChB,SAAS,OAAO;YACpB;YACA,IAAI,SAAS;gBACT,QAAQ;YACZ;QACJ;QAEA,QAAQ,OAAO,GAAG;QAElB,mDAAmD;QACnD,IAAI,SAAS;YACT,IAAI,YAAY;YAChB,IAAI,UAAU,KAAK,KAAK,YAAY;gBAChC,QAAQ,SAAS,GAAG,UAAU,MAAM;YACxC;YAEA,QAAQ,OAAO,GAAG;gBACd,IAAI,YAAY;gBAChB,IAAI,UAAU,KAAK,KAAK,aACpB,UAAU,KAAK,KAAK,YAAY;oBAChC,OAAO;gBACX;gBACA,OAAO,UAAU,KAAK;YAC1B;QACJ;QAEA,OAAO;IACX;IAEA,QAAQ,SAAS,CAAC,QAAQ,GAAG;QACzB,OAAO;IACX;IAEA,QAAQ,SAAS,CAAC,IAAI,GAAG,SAAU,SAAS,EAAE,QAAQ,EAAE,UAAU;QAC9D,IAAI,OAAO,IAAI;QACf,IAAI,WAAW;QACf,IAAI,OAAO,OAAS,+CAA+C;QAC/C,sCAAsC;QAE1D,SAAS,WAAW,KAAK;YACrB,IAAI;gBACA,OAAO,OAAO,cAAc,aAAa,UAAU,SAAS;YAChE,EAAE,OAAO,WAAW;gBAChB,OAAO,OAAO;YAClB;QACJ;QAEA,SAAS,UAAU,SAAS;YACxB,IAAI,OAAO,aAAa,YAAY;gBAChC,mBAAmB,WAAW;gBAC9B,IAAI;oBACA,OAAO,SAAS;gBACpB,EAAE,OAAO,cAAc;oBACnB,OAAO,OAAO;gBAClB;YACJ;YACA,OAAO,OAAO;QAClB;QAEA,SAAS,YAAY,KAAK;YACtB,OAAO,OAAO,eAAe,aAAa,WAAW,SAAS;QAClE;QAEA,EAAE,QAAQ,CAAC;YACP,KAAK,eAAe,CAAC,SAAU,KAAK;gBAChC,IAAI,MAAM;oBACN;gBACJ;gBACA,OAAO;gBAEP,SAAS,OAAO,CAAC,WAAW;YAChC,GAAG,QAAQ;gBAAC,SAAU,SAAS;oBAC3B,IAAI,MAAM;wBACN;oBACJ;oBACA,OAAO;oBAEP,SAAS,OAAO,CAAC,UAAU;gBAC/B;aAAE;QACN;QAEA,+DAA+D;QAC/D,KAAK,eAAe,CAAC,KAAK,GAAG,QAAQ;YAAC,KAAK;YAAG,SAAU,KAAK;gBACzD,IAAI;gBACJ,IAAI,QAAQ;gBACZ,IAAI;oBACA,WAAW,YAAY;gBAC3B,EAAE,OAAO,GAAG;oBACR,QAAQ;oBACR,IAAI,EAAE,OAAO,EAAE;wBACX,EAAE,OAAO,CAAC;oBACd,OAAO;wBACH,MAAM;oBACV;gBACJ;gBAEA,IAAI,CAAC,OAAO;oBACR,SAAS,MAAM,CAAC;gBACpB;YACJ;SAAE;QAEF,OAAO,SAAS,OAAO;IAC3B;IAEA,EAAE,GAAG,GAAG,SAAU,OAAO,EAAE,QAAQ;QAC/B,OAAO,EAAE,SAAS,GAAG,CAAC;IAC1B;IAEA;;;;;;;;;;;CAWC,GACD,QAAQ,SAAS,CAAC,GAAG,GAAG,SAAU,QAAQ;QACtC,WAAW,EAAE;QAEb,OAAO,IAAI,CAAC,IAAI,CAAC,SAAU,KAAK;YAC5B,OAAO,SAAS,KAAK,CAAC,OAAO,WAAW,CAAC;QAC7C;IACJ;IAEA;;;;;;;;;;;;;;;CAeC,GACD,EAAE,IAAI,GAAG;IACT,SAAS,KAAK,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU;QAChD,OAAO,EAAE,OAAO,IAAI,CAAC,WAAW,UAAU;IAC9C;IAEA,QAAQ,SAAS,CAAC,WAAW,GAAG,SAAU,KAAK;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC;YAAc,OAAO;QAAO;IACjD;IAEA,EAAE,WAAW,GAAG,SAAU,OAAO,EAAE,KAAK;QACpC,OAAO,EAAE,SAAS,WAAW,CAAC;IAClC;IAEA,QAAQ,SAAS,CAAC,UAAU,GAAG,SAAU,MAAM;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC;YAAc,MAAM;QAAQ;IACjD;IAEA,EAAE,UAAU,GAAG,SAAU,OAAO,EAAE,MAAM;QACpC,OAAO,EAAE,SAAS,UAAU,CAAC;IACjC;IAEA;;;;;;;;CAQC,GAED,4BAA4B;IAC5B,EAAE,MAAM,GAAG;IACX,SAAS,OAAO,KAAK;QACjB,IAAI,UAAU,QAAQ;YAClB,IAAI,YAAY,MAAM,OAAO;YAC7B,IAAI,UAAU,KAAK,KAAK,aAAa;gBACjC,OAAO,UAAU,KAAK;YAC1B;QACJ;QACA,OAAO;IACX;IAEA;;;CAGC,GACD,EAAE,SAAS,GAAG;IACd,SAAS,UAAU,MAAM;QACrB,OAAO,kBAAkB;IAC7B;IAEA,EAAE,cAAc,GAAG;IACnB,SAAS,eAAe,MAAM;QAC1B,OAAO,SAAS,WAAW,OAAO,OAAO,IAAI,KAAK;IACtD;IAEA;;;CAGC,GACD,EAAE,SAAS,GAAG;IACd,SAAS,UAAU,MAAM;QACrB,OAAO,UAAU,WAAW,OAAO,OAAO,GAAG,KAAK,KAAK;IAC3D;IAEA,QAAQ,SAAS,CAAC,SAAS,GAAG;QAC1B,OAAO,IAAI,CAAC,OAAO,GAAG,KAAK,KAAK;IACpC;IAEA;;;CAGC,GACD,EAAE,WAAW,GAAG;IAChB,SAAS,YAAY,MAAM;QACvB,OAAO,CAAC,UAAU,WAAW,OAAO,OAAO,GAAG,KAAK,KAAK;IAC5D;IAEA,QAAQ,SAAS,CAAC,WAAW,GAAG;QAC5B,OAAO,IAAI,CAAC,OAAO,GAAG,KAAK,KAAK;IACpC;IAEA;;CAEC,GACD,EAAE,UAAU,GAAG;IACf,SAAS,WAAW,MAAM;QACtB,OAAO,UAAU,WAAW,OAAO,OAAO,GAAG,KAAK,KAAK;IAC3D;IAEA,QAAQ,SAAS,CAAC,UAAU,GAAG;QAC3B,OAAO,IAAI,CAAC,OAAO,GAAG,KAAK,KAAK;IACpC;IAEA,uCAAuC;IAEvC,6EAA6E;IAC7E,gFAAgF;IAChF,4EAA4E;IAC5E,yDAAyD;IACzD,IAAI,mBAAmB,EAAE;IACzB,IAAI,sBAAsB,EAAE;IAC5B,IAAI,8BAA8B,EAAE;IACpC,IAAI,2BAA2B;IAE/B,SAAS;QACL,iBAAiB,MAAM,GAAG;QAC1B,oBAAoB,MAAM,GAAG;QAE7B,IAAI,CAAC,0BAA0B;YAC3B,2BAA2B;QAC/B;IACJ;IAEA,SAAS,eAAe,OAAO,EAAE,MAAM;QACnC,IAAI,CAAC,0BAA0B;YAC3B;QACJ;QACA,IAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,IAAI,KAAK,YAAY;YACnE,EAAE,QAAQ,CAAC,QAAQ,CAAC;gBAChB,IAAI,cAAc,qBAAqB,aAAa,CAAC,GAAG;oBACpD,QAAQ,IAAI,CAAC,sBAAsB,QAAQ;oBAC3C,4BAA4B,IAAI,CAAC;gBACrC;YACJ;QACJ;QAEA,oBAAoB,IAAI,CAAC;QACzB,IAAI,UAAU,OAAO,OAAO,KAAK,KAAK,aAAa;YAC/C,iBAAiB,IAAI,CAAC,OAAO,KAAK;QACtC,OAAO;YACH,iBAAiB,IAAI,CAAC,gBAAgB;QAC1C;IACJ;IAEA,SAAS,iBAAiB,OAAO;QAC7B,IAAI,CAAC,0BAA0B;YAC3B;QACJ;QAEA,IAAI,KAAK,cAAc,qBAAqB;QAC5C,IAAI,OAAO,CAAC,GAAG;YACX,IAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,IAAI,KAAK,YAAY;gBACnE,EAAE,QAAQ,CAAC,QAAQ,CAAC;oBAChB,IAAI,WAAW,cAAc,6BAA6B;oBAC1D,IAAI,aAAa,CAAC,GAAG;wBACjB,QAAQ,IAAI,CAAC,oBAAoB,gBAAgB,CAAC,GAAG,EAAE;wBACvD,4BAA4B,MAAM,CAAC,UAAU;oBACjD;gBACJ;YACJ;YACA,oBAAoB,MAAM,CAAC,IAAI;YAC/B,iBAAiB,MAAM,CAAC,IAAI;QAChC;IACJ;IAEA,EAAE,wBAAwB,GAAG;IAE7B,EAAE,mBAAmB,GAAG;QACpB,yEAAyE;QACzE,OAAO,iBAAiB,KAAK;IACjC;IAEA,EAAE,8BAA8B,GAAG;QAC/B;QACA,2BAA2B;IAC/B;IAEA;IAEA,qCAAqC;IAErC;;;CAGC,GACD,EAAE,MAAM,GAAG;IACX,SAAS,OAAO,MAAM;QAClB,IAAI,YAAY,QAAQ;YACpB,QAAQ,SAAU,QAAQ;gBACtB,uCAAuC;gBACvC,IAAI,UAAU;oBACV,iBAAiB,IAAI;gBACzB;gBACA,OAAO,WAAW,SAAS,UAAU,IAAI;YAC7C;QACJ,GAAG,SAAS;YACR,OAAO,IAAI;QACf,GAAG,SAAS;YACR,OAAO;gBAAE,OAAO;gBAAY,QAAQ;YAAO;QAC/C;QAEA,6CAA6C;QAC7C,eAAe,WAAW;QAE1B,OAAO;IACX;IAEA;;;CAGC,GACD,EAAE,OAAO,GAAG;IACZ,SAAS,QAAQ,KAAK;QAClB,OAAO,QAAQ;YACX,QAAQ;gBACJ,OAAO;YACX;YACA,OAAO,SAAU,IAAI;gBACjB,OAAO,KAAK,CAAC,KAAK;YACtB;YACA,OAAO,SAAU,IAAI,EAAE,GAAG;gBACtB,KAAK,CAAC,KAAK,GAAG;YAClB;YACA,UAAU,SAAU,IAAI;gBACpB,OAAO,KAAK,CAAC,KAAK;YACtB;YACA,QAAQ,SAAU,IAAI,EAAE,IAAI;gBACxB,6DAA6D;gBAC7D,qBAAqB;gBACrB,IAAI,SAAS,QAAQ,SAAS,KAAK,GAAG;oBAClC,OAAO,MAAM,KAAK,CAAC,KAAK,GAAG;gBAC/B,OAAO;oBACH,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO;gBACpC;YACJ;YACA,SAAS,SAAU,KAAK,EAAE,IAAI;gBAC1B,OAAO,MAAM,KAAK,CAAC,OAAO;YAC9B;YACA,QAAQ;gBACJ,OAAO,YAAY;YACvB;QACJ,GAAG,KAAK,GAAG,SAAS;YAChB,OAAO;gBAAE,OAAO;gBAAa,OAAO;YAAM;QAC9C;IACJ;IAEA;;;;CAIC,GACD,SAAS,OAAO,OAAO;QACnB,IAAI,WAAW;QACf,EAAE,QAAQ,CAAC;YACP,IAAI;gBACA,QAAQ,IAAI,CAAC,SAAS,OAAO,EAAE,SAAS,MAAM,EAAE,SAAS,MAAM;YACnE,EAAE,OAAO,WAAW;gBAChB,SAAS,MAAM,CAAC;YACpB;QACJ;QACA,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;;CAQC,GACD,EAAE,MAAM,GAAG;IACX,SAAS,OAAO,MAAM;QAClB,OAAO,QAAQ;YACX,SAAS,YAAa;QAC1B,GAAG,SAAS,SAAS,EAAE,EAAE,IAAI;YACzB,OAAO,SAAS,QAAQ,IAAI;QAChC,GAAG;YACC,OAAO,EAAE,QAAQ,OAAO;QAC5B;IACJ;IAEA;;;;;;;;;CASC,GACD,EAAE,MAAM,GAAG;IACX,SAAS,OAAO,KAAK,EAAE,SAAS,EAAE,QAAQ;QACtC,OAAO,EAAE,OAAO,MAAM,CAAC,WAAW;IACtC;IAEA,QAAQ,SAAS,CAAC,MAAM,GAAG,SAAU,SAAS,EAAE,QAAQ;QACpD,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAU,KAAK;YAClC,OAAO,UAAU,KAAK,CAAC,KAAK,GAAG;QACnC,GAAG;IACP;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,EAAE,KAAK,GAAG;IACV,SAAS,MAAM,aAAa;QACxB,OAAO;YACH,sCAAsC;YACtC,4CAA4C;YAC5C,SAAS,UAAU,IAAI,EAAE,GAAG;gBACxB,IAAI;gBAEJ,oEAAoE;gBACpE,uEAAuE;gBACvE,gEAAgE;gBAChE,oEAAoE;gBACpE,sEAAsE;gBACtE,wEAAwE;gBACxE,cAAc;gBAEd,IAAI,OAAO,kBAAkB,aAAa;oBACtC,iBAAiB;oBACjB,IAAI;wBACA,SAAS,SAAS,CAAC,KAAK,CAAC;oBAC7B,EAAE,OAAO,WAAW;wBAChB,OAAO,OAAO;oBAClB;oBACA,IAAI,OAAO,IAAI,EAAE;wBACb,OAAO,EAAE,OAAO,KAAK;oBACzB,OAAO;wBACH,OAAO,KAAK,OAAO,KAAK,EAAE,UAAU;oBACxC;gBACJ,OAAO;oBACH,0BAA0B;oBAC1B,uDAAuD;oBACvD,IAAI;wBACA,SAAS,SAAS,CAAC,KAAK,CAAC;oBAC7B,EAAE,OAAO,WAAW;wBAChB,IAAI,gBAAgB,YAAY;4BAC5B,OAAO,EAAE,UAAU,KAAK;wBAC5B,OAAO;4BACH,OAAO,OAAO;wBAClB;oBACJ;oBACA,OAAO,KAAK,QAAQ,UAAU;gBAClC;YACJ;YACA,IAAI,YAAY,cAAc,KAAK,CAAC,IAAI,EAAE;YAC1C,IAAI,WAAW,UAAU,IAAI,CAAC,WAAW;YACzC,IAAI,UAAU,UAAU,IAAI,CAAC,WAAW;YACxC,OAAO;QACX;IACJ;IAEA;;;;;;CAMC,GACD,EAAE,KAAK,GAAG;IACV,SAAS,MAAM,aAAa;QACxB,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC;IACnB;IAEA,wEAAwE;IACxE;;;;;;;;;;;;;;;;;;;;;;;CAuBC,GACD,CAAC,CAAC,SAAS,GAAG;IACd,SAAS,QAAQ,KAAK;QAClB,MAAM,IAAI,aAAa;IAC3B;IAEA;;;;;;;;;;;;;;CAcC,GACD,EAAE,QAAQ,GAAG;IACb,SAAS,SAAS,QAAQ;QACtB,OAAO;YACH,OAAO,OAAO;gBAAC,IAAI;gBAAE,IAAI;aAAW,EAAE,SAAU,IAAI,EAAE,IAAI;gBACtD,OAAO,SAAS,KAAK,CAAC,MAAM;YAChC;QACJ;IACJ;IAEA;;;;;;CAMC,GACD,EAAE,QAAQ,GAAG;IACb,SAAS,SAAS,MAAM,EAAE,EAAE,EAAE,IAAI;QAC9B,OAAO,EAAE,QAAQ,QAAQ,CAAC,IAAI;IAClC;IAEA,QAAQ,SAAS,CAAC,QAAQ,GAAG,SAAU,EAAE,EAAE,IAAI;QAC3C,IAAI,OAAO,IAAI;QACf,IAAI,WAAW;QACf,EAAE,QAAQ,CAAC;YACP,KAAK,eAAe,CAAC,SAAS,OAAO,EAAE,IAAI;QAC/C;QACA,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;CAKC,GACD,EAAE,GAAG,GAAG,SAAU,MAAM,EAAE,GAAG;QACzB,OAAO,EAAE,QAAQ,QAAQ,CAAC,OAAO;YAAC;SAAI;IAC1C;IAEA,QAAQ,SAAS,CAAC,GAAG,GAAG,SAAU,GAAG;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;YAAC;SAAI;IACrC;IAEA;;;;;;CAMC,GACD,EAAE,GAAG,GAAG,SAAU,MAAM,EAAE,GAAG,EAAE,KAAK;QAChC,OAAO,EAAE,QAAQ,QAAQ,CAAC,OAAO;YAAC;YAAK;SAAM;IACjD;IAEA,QAAQ,SAAS,CAAC,GAAG,GAAG,SAAU,GAAG,EAAE,KAAK;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO;YAAC;YAAK;SAAM;IAC5C;IAEA;;;;;CAKC,GACD,EAAE,GAAG,GACL,CAAC,CAAC,SAAS,GAAG,SAAU,MAAM,EAAE,GAAG;QAC/B,OAAO,EAAE,QAAQ,QAAQ,CAAC,UAAU;YAAC;SAAI;IAC7C;IAEA,QAAQ,SAAS,CAAC,GAAG,GACrB,QAAQ,SAAS,CAAC,SAAS,GAAG,SAAU,GAAG;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU;YAAC;SAAI;IACxC;IAEA;;;;;;;;;;;CAWC,GACD,oDAAoD;IACpD,EAAE,MAAM,GACR,EAAE,IAAI,GAAG,SAAU,MAAM,EAAE,IAAI,EAAE,IAAI;QACjC,OAAO,EAAE,QAAQ,QAAQ,CAAC,QAAQ;YAAC;YAAM;SAAK;IAClD;IAEA,QAAQ,SAAS,CAAC,MAAM,GACxB,QAAQ,SAAS,CAAC,IAAI,GAAG,SAAU,IAAI,EAAE,IAAI;QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAAC;YAAM;SAAK;IAC7C;IAEA;;;;;;CAMC,GACD,EAAE,IAAI,GACN,EAAE,KAAK,GACP,EAAE,MAAM,GAAG,SAAU,MAAM,EAAE,KAAK,SAAS,GAAV;QAC7B,OAAO,EAAE,QAAQ,QAAQ,CAAC,QAAQ;YAAC;YAAM,YAAY,WAAW;SAAG;IACvE;IAEA,QAAQ,SAAS,CAAC,IAAI,GACtB,QAAQ,SAAS,CAAC,KAAK,GACvB,QAAQ,SAAS,CAAC,MAAM,GAAG,SAAU,KAAK,SAAS,GAAV;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAAC;YAAM,YAAY,WAAW;SAAG;IAClE;IAEA;;;;CAIC,GACD,EAAE,MAAM,GAAG,SAAU,MAAM,EAAE,IAAI;QAC7B,OAAO,EAAE,QAAQ,QAAQ,CAAC,SAAS;YAAC,KAAK;YAAG;SAAK;IACrD;IAEA,QAAQ,SAAS,CAAC,MAAM,GAAG,SAAU,IAAI;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS;YAAC,KAAK;YAAG;SAAK;IAChD;IAEA;;;;CAIC,GACD,CAAC,CAAC,MAAM,GACR,EAAE,KAAK,GAAG,SAAU,OAAO,UAAU,GAAX;QACtB,OAAO,EAAE,QAAQ,QAAQ,CAAC,SAAS;YAAC,KAAK;YAAG,YAAY,WAAW;SAAG;IAC1E;IAEA,QAAQ,SAAS,CAAC,KAAK,GAAG;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS;YAAC,KAAK;YAAG,YAAY;SAAW;IAClE;IAEA;;;;;CAKC,GACD,EAAE,KAAK,GAAG,SAAU,OAAO,SAAS,GAAV;QACtB,IAAI,UAAU,EAAE;QAChB,IAAI,OAAO,YAAY,WAAW;QAClC,OAAO,SAAS;YACZ,OAAO,QAAQ,QAAQ,CAAC,SAAS;gBAC7B,IAAI;gBACJ,KAAK,MAAM,CAAC,YAAY;aAC3B;QACL;IACJ;IACA,QAAQ,SAAS,CAAC,KAAK,GAAG;QACtB,IAAI,UAAU,IAAI;QAClB,IAAI,OAAO,YAAY;QACvB,OAAO,SAAS;YACZ,OAAO,QAAQ,QAAQ,CAAC,SAAS;gBAC7B,IAAI;gBACJ,KAAK,MAAM,CAAC,YAAY;aAC3B;QACL;IACJ;IAEA;;;;;CAKC,GACD,EAAE,IAAI,GAAG,SAAU,MAAM;QACrB,OAAO,EAAE,QAAQ,QAAQ,CAAC,QAAQ,EAAE;IACxC;IAEA,QAAQ,SAAS,CAAC,IAAI,GAAG;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;IACnC;IAEA;;;;;;CAMC,GACD,iBAAiB;IACjB,0FAA0F;IAC1F,EAAE,GAAG,GAAG;IACR,SAAS,IAAI,QAAQ;QACjB,OAAO,KAAK,UAAU,SAAU,QAAQ;YACpC,IAAI,eAAe;YACnB,IAAI,WAAW;YACf,aAAa,UAAU,SAAU,UAAS,EAAE,OAAO,EAAE,KAAK;gBACtD,IAAI;gBACJ,IACI,UAAU,YACV,CAAC,WAAW,QAAQ,OAAO,EAAE,EAAE,KAAK,KAAK,aAC3C;oBACE,QAAQ,CAAC,MAAM,GAAG,SAAS,KAAK;gBACpC,OAAO;oBACH,EAAE;oBACF,KACI,SACA,SAAU,KAAK;wBACX,QAAQ,CAAC,MAAM,GAAG;wBAClB,IAAI,EAAE,iBAAiB,GAAG;4BACtB,SAAS,OAAO,CAAC;wBACrB;oBACJ,GACA,SAAS,MAAM,EACf,SAAU,QAAQ;wBACd,SAAS,MAAM,CAAC;4BAAE,OAAO;4BAAO,OAAO;wBAAS;oBACpD;gBAER;YACJ,GAAG,KAAK;YACR,IAAI,iBAAiB,GAAG;gBACpB,SAAS,OAAO,CAAC;YACrB;YACA,OAAO,SAAS,OAAO;QAC3B;IACJ;IAEA,QAAQ,SAAS,CAAC,GAAG,GAAG;QACpB,OAAO,IAAI,IAAI;IACnB;IAEA;;;;;;CAMC,GACD,EAAE,GAAG,GAAG;IAER,SAAS,IAAI,QAAQ;QACjB,IAAI,SAAS,MAAM,KAAK,GAAG;YACvB,OAAO,EAAE,OAAO;QACpB;QAEA,IAAI,WAAW,EAAE,KAAK;QACtB,IAAI,eAAe;QACnB,aAAa,UAAU,SAAU,IAAI,EAAE,OAAO,EAAE,KAAK;YACjD,IAAI,UAAU,QAAQ,CAAC,MAAM;YAE7B;YAEA,KAAK,SAAS,aAAa,YAAY;YACvC,SAAS,YAAY,MAAM;gBACvB,SAAS,OAAO,CAAC;YACrB;YACA,SAAS,WAAW,GAAG;gBACnB;gBACA,IAAI,iBAAiB,GAAG;oBACpB,IAAI,YAAY,OAAO,IAAI,MAAM,KAAK;oBAEtC,UAAU,OAAO,GAAI,yDACjB,iDAAiD,UAAU,OAAO;oBAEtE,SAAS,MAAM,CAAC;gBACpB;YACJ;YACA,SAAS,WAAW,QAAQ;gBACxB,SAAS,MAAM,CAAC;oBACZ,OAAO;oBACP,OAAO;gBACX;YACJ;QACJ,GAAG;QAEH,OAAO,SAAS,OAAO;IAC3B;IAEA,QAAQ,SAAS,CAAC,GAAG,GAAG;QACpB,OAAO,IAAI,IAAI;IACnB;IAEA;;;;;;;;CAQC,GACD,EAAE,WAAW,GAAG,UAAU,aAAa,eAAe;IACtD,SAAS,YAAY,QAAQ;QACzB,OAAO,KAAK,UAAU,SAAU,QAAQ;YACpC,WAAW,UAAU,UAAU;YAC/B,OAAO,KAAK,IAAI,UAAU,UAAU,SAAU,OAAO;gBACjD,OAAO,KAAK,SAAS,MAAM;YAC/B,KAAK;gBACD,OAAO;YACX;QACJ;IACJ;IAEA,QAAQ,SAAS,CAAC,WAAW,GAAG;QAC5B,OAAO,YAAY,IAAI;IAC3B;IAEA;;CAEC,GACD,EAAE,UAAU,GAAG;IACf,SAAS,WAAW,QAAQ;QACxB,OAAO,EAAE,UAAU,UAAU;IACjC;IAEA;;;;;;CAMC,GACD,QAAQ,SAAS,CAAC,UAAU,GAAG;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAU,QAAQ;YAC/B,OAAO,IAAI,UAAU,UAAU,SAAU,OAAO;gBAC5C,UAAU,EAAE;gBACZ,SAAS;oBACL,OAAO,QAAQ,OAAO;gBAC1B;gBACA,OAAO,QAAQ,IAAI,CAAC,YAAY;YACpC;QACJ;IACJ;IAEA;;;;;;;;CAQC,GACD,EAAE,IAAI,GACN,CAAC,CAAC,QAAQ,GAAG,SAAU,MAAM,EAAE,QAAQ;QACnC,OAAO,EAAE,QAAQ,IAAI,CAAC,KAAK,GAAG;IAClC;IAEA,QAAQ,SAAS,CAAC,IAAI,GACtB,QAAQ,SAAS,CAAC,QAAQ,GAAG,SAAU,QAAQ;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG;IAC7B;IAEA;;;;;;;CAOC,GACD,EAAE,QAAQ,GAAG;IACb,SAAS,SAAS,MAAM,EAAE,UAAU;QAChC,OAAO,EAAE,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG;IAC1C;IAEA,QAAQ,SAAS,CAAC,QAAQ,GAAG,SAAU,UAAU;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG;IACrC;IAEA;;;;;;;;;;CAUC,GACD,EAAE,GAAG,GACL,CAAC,CAAC,UAAU,GAAG,SAAU,MAAM,EAAE,QAAQ;QACrC,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC;IAChC;IAEA,QAAQ,SAAS,CAAC,GAAG,GACrB,QAAQ,SAAS,CAAC,UAAU,GAAG,SAAU,QAAQ;QAC7C,IAAI,CAAC,YAAY,OAAO,SAAS,KAAK,KAAK,YAAY;YACnD,MAAM,IAAI,MAAM;QACpB;QACA,WAAW,EAAE;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,SAAU,KAAK;YAC5B,OAAO,SAAS,KAAK,GAAG,IAAI,CAAC;gBACzB,OAAO;YACX;QACJ,GAAG,SAAU,MAAM;YACf,qDAAqD;YACrD,OAAO,SAAS,KAAK,GAAG,IAAI,CAAC;gBACzB,MAAM;YACV;QACJ;IACJ;IAEA;;;;;CAKC,GACD,EAAE,IAAI,GAAG,SAAU,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ;QACpD,OAAO,EAAE,QAAQ,IAAI,CAAC,WAAW,UAAU;IAC/C;IAEA,QAAQ,SAAS,CAAC,IAAI,GAAG,SAAU,SAAS,EAAE,QAAQ,EAAE,QAAQ;QAC5D,IAAI,mBAAmB,SAAU,KAAK;YAClC,4CAA4C;YAC5C,kDAAkD;YAClD,EAAE,QAAQ,CAAC;gBACP,mBAAmB,OAAO;gBAC1B,IAAI,EAAE,OAAO,EAAE;oBACX,EAAE,OAAO,CAAC;gBACd,OAAO;oBACH,MAAM;gBACV;YACJ;QACJ;QAEA,6DAA6D;QAC7D,IAAI,UAAU,aAAa,YAAY,WACnC,IAAI,CAAC,IAAI,CAAC,WAAW,UAAU,YAC/B,IAAI;QAER,IAAI,OAAO,YAAY,YAAY,WAAW,QAAQ,MAAM,EAAE;YAC1D,mBAAmB,QAAQ,MAAM,CAAC,IAAI,CAAC;QAC3C;QAEA,QAAQ,IAAI,CAAC,KAAK,GAAG;IACzB;IAEA;;;;;;;;CAQC,GACD,EAAE,OAAO,GAAG,SAAU,MAAM,EAAE,EAAE,EAAE,KAAK;QACnC,OAAO,EAAE,QAAQ,OAAO,CAAC,IAAI;IACjC;IAEA,QAAQ,SAAS,CAAC,OAAO,GAAG,SAAU,EAAE,EAAE,KAAK;QAC3C,IAAI,WAAW;QACf,IAAI,YAAY,WAAW;YACvB,IAAI,CAAC,SAAS,aAAa,OAAO,OAAO;gBACrC,QAAQ,IAAI,MAAM,SAAS,qBAAqB,KAAK;gBACrD,MAAM,IAAI,GAAG;YACjB;YACA,SAAS,MAAM,CAAC;QACpB,GAAG;QAEH,IAAI,CAAC,IAAI,CAAC,SAAU,KAAK;YACrB,aAAa;YACb,SAAS,OAAO,CAAC;QACrB,GAAG,SAAU,SAAS;YAClB,aAAa;YACb,SAAS,MAAM,CAAC;QACpB,GAAG,SAAS,MAAM;QAElB,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;;CAQC,GACD,EAAE,KAAK,GAAG,SAAU,MAAM,EAAE,OAAO;QAC/B,IAAI,YAAY,KAAK,GAAG;YACpB,UAAU;YACV,SAAS,KAAK;QAClB;QACA,OAAO,EAAE,QAAQ,KAAK,CAAC;IAC3B;IAEA,QAAQ,SAAS,CAAC,KAAK,GAAG,SAAU,OAAO;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAU,KAAK;YAC5B,IAAI,WAAW;YACf,WAAW;gBACP,SAAS,OAAO,CAAC;YACrB,GAAG;YACH,OAAO,SAAS,OAAO;QAC3B;IACJ;IAEA;;;;;;;;CAQC,GACD,EAAE,OAAO,GAAG,SAAU,QAAQ,EAAE,IAAI;QAChC,OAAO,EAAE,UAAU,OAAO,CAAC;IAC/B;IAEA,QAAQ,SAAS,CAAC,OAAO,GAAG,SAAU,IAAI;QACtC,IAAI,WAAW;QACf,IAAI,WAAW,YAAY;QAC3B,SAAS,IAAI,CAAC,SAAS,gBAAgB;QACvC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS,MAAM;QAC1C,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;;CAQC,GACD,EAAE,MAAM,GAAG,SAAU,SAAS,SAAS,GAAV;QACzB,IAAI,OAAO,YAAY,WAAW;QAClC,OAAO,EAAE,UAAU,OAAO,CAAC;IAC/B;IAEA,QAAQ,SAAS,CAAC,MAAM,GAAG;QACvB,IAAI,WAAW,YAAY;QAC3B,IAAI,WAAW;QACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;QACvC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS,MAAM;QAC1C,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;CAOC,GACD,EAAE,MAAM,GACR,EAAE,SAAS,GAAG,SAAU,SAAS,SAAS,GAAV;QAC5B,IAAI,aAAa,WAAW;YACxB,MAAM,IAAI,MAAM;QACpB;QACA,IAAI,WAAW,YAAY,WAAW;QACtC,OAAO;YACH,IAAI,WAAW,SAAS,MAAM,CAAC,YAAY;YAC3C,IAAI,WAAW;YACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;YACvC,EAAE,UAAU,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS,MAAM;YACjD,OAAO,SAAS,OAAO;QAC3B;IACJ;IAEA,QAAQ,SAAS,CAAC,MAAM,GACxB,QAAQ,SAAS,CAAC,SAAS,GAAG;QAC1B,IAAI,OAAO,YAAY;QACvB,KAAK,OAAO,CAAC,IAAI;QACjB,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG;IACrC;IAEA,EAAE,KAAK,GAAG,SAAU,QAAQ,EAAE,MAAM,SAAS,GAAV;QAC/B,IAAI,WAAW,YAAY,WAAW;QACtC,OAAO;YACH,IAAI,WAAW,SAAS,MAAM,CAAC,YAAY;YAC3C,IAAI,WAAW;YACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;YACvC,SAAS;gBACL,OAAO,SAAS,KAAK,CAAC,OAAO;YACjC;YACA,EAAE,OAAO,MAAM,CAAC,UAAU,IAAI,CAAC,SAAS,MAAM;YAC9C,OAAO,SAAS,OAAO;QAC3B;IACJ;IAEA,QAAQ,SAAS,CAAC,KAAK,GAAG;QACtB,IAAI,OAAO,YAAY,WAAW;QAClC,KAAK,OAAO,CAAC,IAAI;QACjB,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG;IACjC;IAEA;;;;;;;;CAQC,GACD,EAAE,OAAO,GACT,EAAE,KAAK,GAAG,SAAU,MAAM,EAAE,IAAI,EAAE,IAAI;QAClC,OAAO,EAAE,QAAQ,KAAK,CAAC,MAAM;IACjC;IAEA,QAAQ,SAAS,CAAC,OAAO,GACzB,QAAQ,SAAS,CAAC,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI;QAC1C,IAAI,WAAW,YAAY,QAAQ,EAAE;QACrC,IAAI,WAAW;QACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;QACvC,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAAC;YAAM;SAAS,EAAE,IAAI,CAAC,SAAS,MAAM;QAC5D,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;;;CASC,GACD,EAAE,KAAK,GACP,EAAE,MAAM,GACR,EAAE,OAAO,GAAG,SAAU,MAAM,EAAE,KAAK,SAAS,GAAV;QAC9B,IAAI,WAAW,YAAY,WAAW;QACtC,IAAI,WAAW;QACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;QACvC,EAAE,QAAQ,QAAQ,CAAC,QAAQ;YAAC;YAAM;SAAS,EAAE,IAAI,CAAC,SAAS,MAAM;QACjE,OAAO,SAAS,OAAO;IAC3B;IAEA,QAAQ,SAAS,CAAC,KAAK,GACvB,QAAQ,SAAS,CAAC,MAAM,GACxB,QAAQ,SAAS,CAAC,OAAO,GAAG,SAAU,KAAK,SAAS,GAAV;QACtC,IAAI,WAAW,YAAY,WAAW;QACtC,IAAI,WAAW;QACf,SAAS,IAAI,CAAC,SAAS,gBAAgB;QACvC,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAAC;YAAM;SAAS,EAAE,IAAI,CAAC,SAAS,MAAM;QAC5D,OAAO,SAAS,OAAO;IAC3B;IAEA;;;;;;;;;CASC,GACD,EAAE,OAAO,GAAG;IACZ,SAAS,QAAQ,MAAM,EAAE,QAAQ;QAC7B,OAAO,EAAE,QAAQ,OAAO,CAAC;IAC7B;IAEA,QAAQ,SAAS,CAAC,OAAO,GAAG,SAAU,QAAQ;QAC1C,IAAI,UAAU;YACV,IAAI,CAAC,IAAI,CAAC,SAAU,KAAK;gBACrB,EAAE,QAAQ,CAAC;oBACP,SAAS,MAAM;gBACnB;YACJ,GAAG,SAAU,KAAK;gBACd,EAAE,QAAQ,CAAC;oBACP,SAAS;gBACb;YACJ;QACJ,OAAO;YACH,OAAO,IAAI;QACf;IACJ;IAEA,EAAE,UAAU,GAAG;QACX,MAAM,IAAI,MAAM;IACpB;IAEA,iEAAiE;IACjE,IAAI,cAAc;IAElB,OAAO;AAEP","ignoreList":[0],"debugId":null}}]
}